{"title":"数据结构之链表","uid":"44f9b4429be4a923b3d82ea9a6628937","slug":"ds/数据结构之链表","date":"2020-10-30T05:14:02.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/ds/数据结构之链表.json","keywords":"golang rust python docker k8s","cover":[],"content":"<h4 id=\"1-什么是链表\"><a href=\"#1-什么是链表\" class=\"headerlink\" title=\"1. 什么是链表\"></a>1. 什么是链表</h4><p>  链表是由一组不必相连（可以连续也可以不连续）的内存结构<strong>节点</strong>，按特定的顺序链接在一起的抽象数据类型</p>\n<span id=\"more\"></span>\n<h4 id=\"2-链表的分类\"><a href=\"#2-链表的分类\" class=\"headerlink\" title=\"2. 链表的分类\"></a>2. 链表的分类</h4><p>  链表常用的有三类，<code>单链表</code> <code>双向链表</code> <code>循环链表</code>, <code>循环链表</code>又分为单项与双向<br>  <img src=\"/images/ds/linklist.png\" alt=\"ll\"></p>\n<h4 id=\"3-用Python来实现单向循环链表-其他的大同小异\"><a href=\"#3-用Python来实现单向循环链表-其他的大同小异\" class=\"headerlink\" title=\"3. 用Python来实现单向循环链表,其他的大同小异\"></a>3. 用Python来实现<code>单向循环链表</code>,其他的大同小异</h4><p>  一般会抽象如下方法</p>\n<ul>\n<li><code>add(item)</code> 向链表添加数据项</li>\n<li><code>remove(item)</code> 删除链表中的数据项</li>\n<li><code>exist(item)</code> 数据是否存在于链表</li>\n<li><code>empty()</code> 链表是否为空</li>\n<li><code>size()</code> 返回链表数据个数</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 链表的一个节点\nclass Node(object):\n    def __init__(self, data&#x3D;None):\n        self.__data &#x3D; data\n        self.__next &#x3D; None\n\n    def get_data(self):\n        return self.__data\n\n    def set_data(self, data):\n        self.__data &#x3D; data\n\n    def get_next(self):\n        return self.__next\n\n    def set_next(self, node):\n        self.__next &#x3D; node\n\n\n# 单向循环链表\nclass LinkList(object):\n    def __init__(self):\n        self.head: Node &#x3D; Node()\n        # 初始化时,下一个节点的指针指向head\n        self.head.set_next(self.head)\n\n    # 添加节点\n    def add(self, item):\n        node &#x3D; Node(item)\n        # 将新节点的指针指向 head\n        node.set_next(self.head.get_next())\n        # 将head指针指向 新创建的node\n        self.head.set_next(node)\n\n    # 移除节点\n    def remove(self, item):\n        prev &#x3D; self.head\n        while prev.get_next() !&#x3D; self.head:\n            cur &#x3D; prev.get_next()\n\n            if cur.get_data() &#x3D;&#x3D; item:\n                prev.set_next(cur.get_next())\n\n            prev &#x3D; prev.get_next()\n\n    def exist(self, item) -&gt; bool:\n        cur &#x3D; self.head.get_next()\n        while cur !&#x3D; self.head:\n            if cur.get_data() &#x3D;&#x3D; item:\n                return True\n            cur &#x3D; cur.get_next()\n        return False\n\n    def empty(self):\n        return self.head.get_next() &#x3D;&#x3D; self.head\n\n    def size(self):\n        count &#x3D; 0\n        cur &#x3D; self.head.get_next()\n        while cur !&#x3D; self.head:\n            count +&#x3D; 1\n            cur &#x3D; cur.get_next()\n        return count\n\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    s &#x3D; LinkList()\n    print(f&quot;s.empty() &#x3D;&#x3D; &#123;s.empty()&#125;, s.size() &#x3D;&#x3D; &#123;s.size()&#125;&quot;)\n\n    s.add(100)\n    s.add(99)\n    print(f&quot;s.empty() &#x3D;&#x3D; &#123;s.empty()&#125;, s.size() &#x3D;&#x3D; &#123;s.size()&#125;&quot;)\n\n    print(f&quot;100 &#123;&#39;&#39; if s.exist(100) else &#39;not&#39;&#125; in s&quot;)\n    print(f&quot;98 &#123;&#39;&#39; if s.exist(98) else &#39;not&#39;&#125; in s&quot;)\n    print(f&quot;s.empty() &#x3D;&#x3D; &#123;s.empty()&#125;, s.size() &#x3D;&#x3D; &#123;s.size()&#125;&quot;)\n\n    s.remove(99)\n    print(f&quot;s.empty() &#x3D;&#x3D; &#123;s.empty()&#125;, s.size() &#x3D;&#x3D; &#123;s.size()&#125;&quot;)</code></pre>","text":"1. 什么是链表 链表是由一组不必相连（可以连续也可以不连续）的内存结构节点，按特定的顺序链接在一起的抽象数据类型 2. 链表的分类 链表常用的有三类，单链表 双向链表 循环链表, 循环链表又分为单项与双向 3. 用Python来实现单向循环链表,其他的大同小异 一般会抽象如下方...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"},{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">1. 什么是链表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2. 链表的分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%94%A8Python%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%8D%95%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8-%E5%85%B6%E4%BB%96%E7%9A%84%E5%A4%A7%E5%90%8C%E5%B0%8F%E5%BC%82\"><span class=\"toc-text\">3. 用Python来实现单向循环链表,其他的大同小异</span></a></li></ol>","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"详解MySQL的事务机制","uid":"63b43d983c23e0729b58ec6fc65ef6d7","slug":"mysql/详解MySQL的事务机制","date":"2020-11-10T05:56:05.000Z","updated":"2021-12-11T02:10:04.780Z","comments":true,"path":"api/articles/mysql/详解MySQL的事务机制.json","keywords":"golang rust python docker k8s","cover":null,"text":"1. 什么是事务 事务就是一组原子性的sql查询，或者说一个独立的工作单元。即事务内的sql语句，要么全部执行成功，要么全部执行失败； 2. ACID 我们都知道事务的四大特性 原子性(atomicity)：一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/categories/MySQL.json"}],"tags":[{"name":"mysql","slug":"mysql","count":4,"path":"api/tags/mysql.json"},{"name":"事务机制","slug":"事务机制","count":1,"path":"api/tags/事务机制.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"数据结构之线性与非线性","uid":"80648934d5c19eeef307e3bc1f9a947e","slug":"ds/数据结构之线性与非线性","date":"2020-10-30T02:35:58.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/ds/数据结构之线性与非线性.json","keywords":"golang rust python docker k8s","cover":[],"text":"数据结构是计算机存储组织数据的方式，常见的数据结构分类如下图： 线性结构 什么是线性结构？ 数据结构中线性结构指的是数据元素之间存在着 一对一 的线性关系的数据结构。线性结构是一个有序数据元素的集合。 线性结构的特点- 线性结构有唯一的首元素（第一个元素）- 线性结构有唯一的尾元...","link":"","photos":[],"count_time":{"symbolsCount":597,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/categories/数据结构.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":2,"path":"api/tags/数据结构.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}