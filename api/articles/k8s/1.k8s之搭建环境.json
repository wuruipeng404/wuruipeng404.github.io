{"title":"k8s之搭建环境(一)","uid":"3ecf53fd0f043e7fd47d014c92e0e74b","slug":"k8s/1.k8s之搭建环境","date":"2020-11-27T05:18:17.000Z","updated":"2021-12-11T02:10:04.780Z","comments":true,"path":"api/articles/k8s/1.k8s之搭建环境.json","keywords":"golang rust python docker k8s","cover":[],"content":"<p>flag:从今天开始，我将更新K8S系列博文，从环境搭建，到K8S概念的详解，到在k8s上部署完整项目，乃至有可能对K8S的二次开发。未来可期</p>\n<span id=\"more\"></span>\n\n<h2 id=\"MAC\"><a href=\"#MAC\" class=\"headerlink\" title=\"MAC\"></a>MAC</h2><h3 id=\"1-安装docker-desktop，这个没什么好说的\"><a href=\"#1-安装docker-desktop，这个没什么好说的\" class=\"headerlink\" title=\"1. 安装docker-desktop，这个没什么好说的\"></a>1. 安装docker-desktop，这个没什么好说的</h3><p>  <a href=\"https://www.docker.com/products/docker-desktop\">docker</a></p>\n<h3 id=\"2-配置镜像仓库源进行加速\"><a href=\"#2-配置镜像仓库源进行加速\" class=\"headerlink\" title=\"2. 配置镜像仓库源进行加速\"></a>2. 配置镜像仓库源进行加速</h3><p>  可以选择的源有很多</p>\n<ul>\n<li>docker官方 <code>https://registry.docker-cn.com</code></li>\n<li>网易 <code>http://hub-mirror.c.163.com</code></li>\n<li>中科大 <code>http://docker.mirrors.ustc.edu.cn</code></li>\n</ul>\n<p>  <img src=\"/images/k8s/dockerconfig.png\" alt=\"docker-source\"></p>\n<h3 id=\"3-拉取K8S镜像\"><a href=\"#3-拉取K8S镜像\" class=\"headerlink\" title=\"3. 拉取K8S镜像\"></a>3. 拉取K8S镜像</h3><p>  众所周知，由于GFW，在不作特殊处理的情况下，K8S的镜像是拉不下来的，这里我们借用此项目来拉镜像<a href=\"https://github.com/AliyunContainerService/k8s-for-docker-desktop\">k8s-for-docker-desktop</a></p>\n<ol>\n<li><code>git clone https://github.com/AliyunContainerService/k8s-for-docker-desktop.git</code></li>\n<li>进入项目目录执行 <code>./load_images.sh</code> (注意确认好自己的版本)</li>\n<li>开启K8S<br><img src=\"/images/k8s/startk8s.png\" alt=\"startk8s\"><br>如果长时间没有成功开启，可以运行如下命令查看日志<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pred&#x3D;&#39;process matches &quot;.*(ocker|vpnkit).*&quot;\n || (process in &#123;&quot;taskgated-helper&quot;, &quot;launchservicesd&quot;, &quot;kernel&quot;&#125; &amp;&amp; eventMessage contains[c] &quot;docker&quot;)&#39;\n &#x2F;usr&#x2F;bin&#x2F;log stream --style syslog --level&#x3D;debug --color&#x3D;always --predicate &quot;$pred&quot;</code></pre></li>\n<li>验证集群状态<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 注意如果你配置了终端代理 这里可能会有问题 可以取消，或者在命令前加入 http_proxy&#x3D;&quot;&quot; https_proxy&#x3D;&quot;&quot;\nkubectl cluster-info</code></pre></li>\n<li>默认master是不调度pod的，使用如下命令将master加入调度节点<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl taint node k8s-master node-role.kubernetes.io&#x2F;master-\n# 恢复\nkubectl taint node k8s-master node-role.kubernetes.io&#x2F;master&#x3D;&quot;&quot;</code></pre></li>\n</ol>\n<h3 id=\"4-配置Daskboard\"><a href=\"#4-配置Daskboard\" class=\"headerlink\" title=\"4. 配置Daskboard\"></a>4. 配置Daskboard</h3><p>  <a href=\"https://github.com/kubernetes/dashboard\">K8S-DaskBoard</a></p>\n<ol>\n<li>安装 <code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.4/aio/deploy/recommended.yaml</code></li>\n<li>开启访问 <code>kubectl proxy</code></li>\n<li>通过 <code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code> 连接访问dashboard</li>\n<li>这里会有两种认证方式进行选择，1是token，2是配置文件.<ol>\n<li>配置访问令牌<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">TOKEN&#x3D;$(kubectl -n kube-system describe secret default| awk &#39;$1&#x3D;&#x3D;&quot;token:&quot;&#123;print $2&#125;&#39;)\nkubectl config set-credentials docker-for-desktop --token&#x3D;&quot;$&#123;TOKEN&#125;&quot;\necho $TOKEN</code></pre></li>\n<li>将获得的token 填入认证框即可</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Windows-TODO\"><a href=\"#Windows-TODO\" class=\"headerlink\" title=\"Windows (TODO)\"></a>Windows (TODO)</h2><h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><p>  这里我们采用Centos7</p>\n<ol>\n<li>检查内核版本 <code>uname -r</code> 需要在<em>3.10</em>以上 (Master&amp;&amp;Node)</li>\n<li>关闭防火墙 <code>systemctl disable firewalld &amp;&amp; systemctl stop firewalld</code> (Master&amp;&amp;Node)</li>\n<li>配置系统参数(Master&amp;&amp;Node)<br><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum -y install bridge-utils \nmodprobe bridge &amp;&amp; modprobe br_netfilter\n\ncat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf\nnet.bridge.bridge-nf-call-ip6tables &#x3D; 1\nnet.bridge.bridge-nf-call-iptables &#x3D; 1\nEOF\nsysctl --system\n\n# 禁用 selinux\nsetenforce 0 \nsed -i &#39;s&#x2F;^SELINUX&#x3D;enforcing$\\|^SELINUX&#x3D;disabled$&#x2F;SELINUX&#x3D;permissive&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config\n\n# 关闭swap 取消自动挂载\nswapoff -a &amp;&amp; sed -i &quot;&#x2F;swap&#x2F;s&#x2F;^&#x2F;#&#x2F;&quot; &#x2F;etc&#x2F;fstab</code></pre></li>\n<li>安装kubeadm(Master&amp;&amp;Node)<br><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">cat &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubebrnetes.repo &lt;&lt; EOF\n[kubernetes]\nname&#x3D;Kubernetes Respository\nbaseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;\nenabled&#x3D;1\ngpgcheck&#x3D;0\nEOF\n\nyum clean all &amp;&amp; yum makecache faster\nyum -y install kubelet kubeadm kubectl --disableexcludes&#x3D;kubernetes\n\nsystemctl enable --now kubelet</code></pre></li>\n<li>修改默认配置文件初始化集群<ul>\n<li>Master<ol>\n<li><code>kubeadm config print init-defaults &gt; init-master.yaml</code></li>\n<li>修改配置文件中的 <code>advertiseAddress</code> 为你Master的ip地址, 修改<code>imageRepository</code>镜像仓库地址，我这里用的<code>docker.io/gotok8s</code>,如果你需要用到网络插件比如flannel，还需要修改<code>podSubnet</code>为其分配一个网段，注意不要跟宿主机冲突</li>\n<li>初始化，依次执行<code>kubeadm config images pull --config=init-master.yaml</code> &amp;&amp; <code>kubeadm init --config=init-master.yaml</code></li>\n</ol>\n</li>\n<li>Node<ol>\n<li><code>kubeadm config print join-defaults &gt; init-node.yaml</code></li>\n<li>修改配置文件中<code>apiServerEndpoint</code>为你master的api服务地址，以及修改Token配置。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>安装网络插件flannel,在Master直接执行如下命令即可（注意修改文件中的网段分配地址）  <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml</code></pre></li>\n<li>共享存储（这个我会单独开一篇进行讲解） </li>\n<li>说明<ol>\n<li>加入集群节点的token有可能会失效（比如你过了一段时间新加一台机器），导致加入节点失败，这时候在master上执行<code>kubeadm token create</code>生成新的token加入即可</li>\n</ol>\n</li>\n</ol>\n","text":"flag:从今天开始，我将更新K8S系列博文，从环境搭建，到K8S概念的详解，到在k8s上部署完整项目，乃至有可能对K8S的二次开发。未来可期 MAC1. 安装docker-desktop，这个没什么好说的 docker 2. 配置镜像仓库源进行加速 可以选择的源有很多 dock...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"k8s","slug":"k8s","count":4,"path":"api/categories/k8s.json"}],"tags":[{"name":"k8s","slug":"k8s","count":5,"path":"api/tags/k8s.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MAC\"><span class=\"toc-text\">MAC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85docker-desktop%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%B2%A1%E4%BB%80%E4%B9%88%E5%A5%BD%E8%AF%B4%E7%9A%84\"><span class=\"toc-text\">1. 安装docker-desktop，这个没什么好说的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E6%BA%90%E8%BF%9B%E8%A1%8C%E5%8A%A0%E9%80%9F\"><span class=\"toc-text\">2. 配置镜像仓库源进行加速</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8B%89%E5%8F%96K8S%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">3. 拉取K8S镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%85%8D%E7%BD%AEDaskboard\"><span class=\"toc-text\">4. 配置Daskboard</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Windows-TODO\"><span class=\"toc-text\">Windows (TODO)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Linux\"><span class=\"toc-text\">Linux</span></a></li></ol>","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"记一次磁盘满后引发的血案","uid":"0fd644d7a8607c81bbe89c11e736a98e","slug":"work/记一次磁盘满后引发的血案","date":"2020-12-07T05:37:12.000Z","updated":"2022-03-13T05:30:06.012Z","comments":true,"path":"api/articles/work/记一次磁盘满后引发的血案.json","keywords":"golang rust python docker k8s","cover":null,"text":"概要 微服务项目， 部署于docker swarm集群 docker swarm集群 是一台物理服务器 + 物理服务器自身虚拟出来的 四个节点，也就是总共五个节点所组成。 我们的中间件有 ELK, MySQL, Redis, RabbitMQ, DFS, ETCD，+上 大量的服...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"work","slug":"work","count":1,"path":"api/categories/work.json"}],"tags":[{"name":"工作记录","slug":"工作记录","count":1,"path":"api/tags/工作记录.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"关于Golang高并发高效率代码的一些实践","uid":"771a458cad4b66e91f1476adf7a25646","slug":"golang/关于Golang高并发高效率代码的一些实践","date":"2020-11-18T09:49:19.000Z","updated":"2022-03-13T05:29:09.025Z","comments":true,"path":"api/articles/golang/关于Golang高并发高效率代码的一些实践.json","keywords":"golang rust python docker k8s","cover":[],"text":"Go的并发 Go语言是原生支持并发的，它和传统基于OS线程和进程的实现不同，Go语言的并发是基于用户态的并发，这种并发方式就变得非常轻量，能够轻松运行几万甚至是几十万的并发逻辑。因此使用Go开发的服务端应用采用的就是“协程模型”，每一个请求由独立的协程处理完成、 并发模型 Go的...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"go","slug":"go","count":4,"path":"api/categories/go.json"}],"tags":[{"name":"go","slug":"go","count":6,"path":"api/tags/go.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}