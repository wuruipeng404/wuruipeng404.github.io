{"title":"理解设计模式之策略模式","uid":"8edf5cc3c2cccf16484400f87c198799","slug":"golang/dp/理解设计模式之策略模式","date":"2020-10-27T06:51:40.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之策略模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>策略模式一般是用来封装一系列的算法，让这些算法可以在运行时互换。复合开闭原则</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 定义付款对象\ntype Payment struct &#123;\n\tcontext  *PaymentContext &#x2F;&#x2F; 上下文\n\tstrategy PaymentStrategy &#x2F;&#x2F; 策略\n&#125;\n\nfunc (p *Payment) Pay() &#123;\n\tp.strategy.Pay(p.context)\n&#125;\n\n&#x2F;&#x2F; 付款上下文\ntype PaymentContext struct &#123;\n\tName   string\n\tCardID string\n\tMoney  int\n&#125;\n\nfunc NewPayment(name, cardID string, money int, strategy PaymentStrategy) *Payment &#123;\n\treturn &amp;Payment&#123;\n\t\tcontext: &amp;PaymentContext&#123;\n\t\t\tName:   name,\n\t\t\tCardID: cardID,\n\t\t\tMoney:  money,\n\t\t&#125;,\n\t\tstrategy: strategy,\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 付款策略 接口(算法接口)\ntype PaymentStrategy interface &#123;\n\tPay(*PaymentContext)\n&#125;\n\ntype Cash struct&#123;&#125;\n\nfunc (*Cash) Pay(ctx *PaymentContext) &#123;\n\tfmt.Printf(&quot;Pay $%d to %s by cash&quot;, ctx.Money, ctx.Name)\n&#125;\n\ntype Wechat struct&#123;&#125;\n\nfunc (*Wechat) Pay(ctx *PaymentContext) &#123;\n\tfmt.Printf(&quot;Pay $%d to %s by wechat account %s&quot;, ctx.Money, ctx.Name, ctx.CardID)\n&#125;\n\nfunc main() &#123;\n\tstrategy :&#x3D; &amp;Cash&#123;&#125;\n\tNewPayment(&quot;rumple&quot;, &quot;12938282&quot;, 100, strategy).Pay()\n&#125;</code></pre>","text":"策略模式一般是用来封装一系列的算法，让这些算法可以在运行时互换。复合开闭原则 package main import &quot;fmt&quot; &#x2F;&#x2F; 定义付款对象 type Payment struct &#123; context *PaymentCo...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之状态模式","uid":"57343b3b347c194726d5fcd7c1e57903","slug":"golang/dp/理解设计模式之状态模式","date":"2020-10-27T06:58:29.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之状态模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"状态模式没啥好说的，就是用来分离行为与状态的。直接看例子 package main import &quot;fmt&quot; type Week interface &#123; Today() Next(*DayContext) &#125; type DayContext...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之模板方法模式","uid":"047033f0c1450db28daf35058b5fd01e","slug":"golang/dp/理解设计模式之模板方法模式","date":"2020-10-27T02:23:35.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之模板方法模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"模版方法模式使用继承机制，把通用步骤和通用方法放到父类中，把具体实现延迟到子类中实现。使得实现符合开闭原则。注意匿名组合虽然像继承，但还是有不一样的地方的。比如，因为父类需要调用子类方法，所以子类需要匿名组合父类的同时，父类需要持有子类的引用 package main impor...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}