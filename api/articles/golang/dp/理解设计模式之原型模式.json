{"title":"理解设计模式之原型模式","uid":"ff7986bd3e13e58f395ae3555d928c50","slug":"golang/dp/理解设计模式之原型模式","date":"2020-10-23T12:08:31.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之原型模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>原型模式和其他创建型模式不一样的是，它是复制一个已有对象，而不是创建一个新对象，被复制的对象就叫做原型。<br>原型模式多用于建造复杂或者耗时的对象，这样直接复制会比较高效。<br>原型对象一般会配合原型管理器一起使用</p>\n<span id=\"more\"></span>\n<ol>\n<li><p>go</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;reflect&quot;\n)\n\ntype Cloneable interface &#123;\n\tClone() Cloneable\n&#125;\n\n&#x2F;&#x2F; 原型管理器\ntype ProtoManager struct &#123;\n\tprototypes map[string]Cloneable\n&#125;\n\nfunc NewProtoManager() *ProtoManager &#123;\n\treturn &amp;ProtoManager&#123;prototypes: make(map[string]Cloneable)&#125;\n&#125;\n\nfunc (p *ProtoManager) Get(name string) Cloneable &#123;\n\treturn p.prototypes[name]\n&#125;\nfunc (p *ProtoManager) Set(name string, v Cloneable) &#123;\n\tp.prototypes[name] &#x3D; v\n&#125;\n\ntype Object struct &#123;\n\tname string\n&#125;\n\nfunc (a *Object) Clone() Cloneable &#123;\n\ttc :&#x3D; *a\n\treturn &amp;tc\n&#125;\n\nfunc NewObject(name string) *Object &#123;\n\treturn &amp;Object&#123;name: name&#125;\n&#125;\n\nfunc main() &#123;\n\tmanager :&#x3D; NewProtoManager()\n\ta :&#x3D; NewObject(&quot;rumple&quot;)\n\tmanager.Set(&quot;t1&quot;, a)\n\n\tc :&#x3D; manager.Get(&quot;t1&quot;).Clone()\n\tfmt.Println(c)\n\n\t&#x2F;&#x2F; 判断是否为同一对象\n\tfmt.Println(a &#x3D;&#x3D; c)\n\t&#x2F;&#x2F; 判断是否相等\n\tfmt.Println(reflect.DeepEqual(a, c))\n&#125;</code></pre>\n</li>\n<li><p>python</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import abc\n\nimport copy\n\n\nclass ProtoType(metaclass&#x3D;abc.ABCMeta):\n    &quot;&quot;&quot;\n    原型抽象类\n    &quot;&quot;&quot;\n\n    @abc.abstractmethod\n    def clone(self):\n        pass\n\n    @abc.abstractmethod\n    def deep_clone(self):\n        pass\n\n\nclass WorkExperience(object):\n    &quot;&quot;&quot;\n    工作经验类\n    &quot;&quot;&quot;\n\n    def __init__(self):\n        self.work_time &#x3D; None\n        self.company &#x3D; None\n\n    def set_work(self, time, company: str):\n        self.work_time &#x3D; time\n        self.company &#x3D; company\n\n\nclass Resume(ProtoType):\n    &quot;&quot;&quot;\n    简历类\n    &quot;&quot;&quot;\n\n    def __init__(self, name: str):\n        self.name &#x3D; name\n        self.work_experience &#x3D; WorkExperience()\n        self.gender &#x3D; None\n        self.age &#x3D; None\n\n    def set_person_info(self, gender: str, age: int):\n        self.gender &#x3D; gender\n        self.age &#x3D; age\n\n    def set_work_experience(self, time, company: str):\n        self.work_experience.set_work(time, company)\n\n    def display(self):\n        print(self.name, self.gender, self.age)\n        print(f&quot;工作经历 &#123;self.work_experience.company, self.work_experience.work_time&#125;&quot;)\n\n    def clone(self):\n        return copy.copy(self)\n\n    def deep_clone(self):\n        return copy.deepcopy(self)\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    a &#x3D; Resume(&quot;rumple&quot;)\n    b &#x3D; a.clone()\n    c &#x3D; a.deep_clone()\n\n    a.set_person_info(&quot;男&quot;, 67)\n    a.set_work_experience(&#39;2018&#39;, &quot;腾讯&quot;)\n\n    b.set_person_info(&quot;女&quot;, 45)\n    b.set_work_experience(&#39;2019&#39;, &quot;阿里&quot;)\n\n    c.set_person_info(&quot;女&quot;, 32)\n    c.set_work_experience(&#39;2020&#39;, &quot;百度&quot;)\n\n    a.display()\n    print(&quot;---------------------------------------&quot;)\n    b.display()\n    print(&quot;-----------------&quot;)\n    c.display()</code></pre></li>\n</ol>\n","text":"原型模式和其他创建型模式不一样的是，它是复制一个已有对象，而不是创建一个新对象，被复制的对象就叫做原型。原型模式多用于建造复杂或者耗时的对象，这样直接复制会比较高效。原型对象一般会配合原型管理器一起使用 go package main import ( &quot;fmt&quo...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之外观模式","uid":"9b3ae101f06841603467d83a4a546e9c","slug":"golang/dp/理解设计模式之外观模式","date":"2020-10-26T02:52:42.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之外观模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"外观模式的主要作用是 减少客户端与系统内部交互的复杂性，对子系统的一系列接口，提供一个一致性的界面，方便调用 package main import &quot;fmt&quot; func NewAPI() FacadeAPI &#123; return &amp;apiImp...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之单例模式","uid":"1602c992a6a28c4ed33dd66720a6bf2e","slug":"golang/dp/理解设计模式之单例模式","date":"2020-10-23T12:05:12.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之单例模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"go语言中的单例模式简单到没啥可说的。 正常创建一个全局变量就是，单例为了线程安全你可以加锁，这里直接使用sync.once,原理一样。 go package main import &quot;sync&quot; type Singleton struct&#123;&#12...","link":"","photos":[],"count_time":{"symbolsCount":906,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}