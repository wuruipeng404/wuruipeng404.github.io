{"title":"理解设计模式之迭代器模式","uid":"293d39b9d616d2268ed47b9219110ea6","slug":"golang/dp/理解设计模式之迭代器模式","date":"2020-10-27T01:35:19.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之迭代器模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>迭代器模式，一样的一个字面意思，封装你的对象 对外提供一个迭代器，可以不断迭代你的对象，这样外部无需了解对象的具体实现细节，通过迭代器就可以不断访问下一个元素</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;container&#x2F;list&quot;\n\n&#x2F;&#x2F; 定义一个容器接口 拥有迭代方法 返回迭代器\ntype Container interface &#123;\n\tIterator() Iterator\n\tAdd(interface&#123;&#125;)\n&#125;\n\n&#x2F;&#x2F; 定义容器类\ntype MyList struct &#123;\n\tlist *list.List\n&#125;\n\nfunc (l *MyList) Iterator() Iterator &#123;\n\treturn &amp;ListIterator&#123;l.list.Front(), l.list.Back()&#125;\n&#125;\n\nfunc (l *MyList) Add(value interface&#123;&#125;) &#123;\n\tl.list.PushBack(value)\n&#125;\n\nfunc NewList() Container &#123;\n\treturn &amp;MyList&#123;list: list.New()&#125;\n&#125;\n\n&#x2F;&#x2F; 定义迭代器接口\ntype Iterator interface &#123;\n\tHasNext() bool\n\tNext() interface&#123;&#125;\n&#125;\n\n&#x2F;&#x2F; 定义迭代器类\ntype ListIterator struct &#123;\n\tcur *list.Element\n\tend *list.Element\n&#125;\n\nfunc (l *ListIterator) HasNext() bool &#123;\n\treturn l.cur !&#x3D; l.end\n&#125;\n\nfunc (l *ListIterator) Next() interface&#123;&#125; &#123;\n\tvalue :&#x3D; l.cur.Next().Value\n\tl.cur &#x3D; l.cur.Next()\n\treturn value\n&#125;\n\nfunc main() &#123;\n\tli :&#x3D; NewList()\n\n\tfor i :&#x3D; 0; i &lt;&#x3D; 10; i++ &#123;\n\t\tli.Add(i)\n\t&#125;\n\n\titer :&#x3D; li.Iterator()\n\titer.HasNext()\n&#125;</code></pre>","text":"迭代器模式，一样的一个字面意思，封装你的对象 对外提供一个迭代器，可以不断迭代你的对象，这样外部无需了解对象的具体实现细节，通过迭代器就可以不断访问下一个元素 package main import &quot;container&#x2F;list&quot; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之模板方法模式","uid":"047033f0c1450db28daf35058b5fd01e","slug":"golang/dp/理解设计模式之模板方法模式","date":"2020-10-27T02:23:35.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之模板方法模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"模版方法模式使用继承机制，把通用步骤和通用方法放到父类中，把具体实现延迟到子类中实现。使得实现符合开闭原则。注意匿名组合虽然像继承，但还是有不一样的地方的。比如，因为父类需要调用子类方法，所以子类需要匿名组合父类的同时，父类需要持有子类的引用 package main impor...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之命令模式","uid":"2f495e9970023abb3de380eead14299f","slug":"golang/dp/理解设计模式之命令模式","date":"2020-10-26T10:05:50.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之命令模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"命令模式本质是把某个对象的方法调用封装到对象中，方便传递、存储、调用。 示例中把主板单中的启动(start)方法和重启(reboot)方法封装为命令对象，再传递到主机(box)对象中。于两个按钮进行绑定： 第一个机箱(box1)设置按钮1(buttion1) 为开机按钮2(but...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}