{"title":"理解设计模式之中介者模式","uid":"2f29c37507db5ca2a228334b44c7a06a","slug":"golang/dp/理解设计模式之中介者模式","date":"2020-10-26T09:39:55.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之中介者模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>中介者模式是用来封装对象与对象之间的交互，使依赖变简单，使复杂交互简单化，封装在中介者中，显而易见的缺点就是，由于逻辑封装在中介者中，所以中介者以后会越来越复杂</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 定义中介者类\ntype Mediator struct &#123;\n\tmarket IDepartment &#x2F;&#x2F; 市场部门\n\ttec    IDepartment &#x2F;&#x2F; 技术部门\n&#125;\n\nfunc NewMediator() *Mediator &#123;\n\treturn &amp;Mediator&#123;&#125;\n&#125;\n\nfunc (m *Mediator) SetMarket(market IDepartment) &#123;\n\tm.market &#x3D; market\n&#125;\n\nfunc (m *Mediator) SetTec(tec IDepartment) &#123;\n\tm.tec &#x3D; tec\n&#125;\n\nfunc (m *Mediator) ForwardMessage(department IDepartment, message string) &#123;\n\tswitch department.(type) &#123;\n\tcase *Technical: &#x2F;&#x2F; 技术部门的消息转发给市场部\n\t\tm.market.GetMess(message)\n\tcase *Market: &#x2F;&#x2F; 相同\n\t\tm.tec.GetMess(message)\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 定义部门接口\ntype IDepartment interface &#123;\n\tSendMess(message string)\n\tGetMess(message string)\n&#125;\n\n&#x2F;&#x2F; 定义技术部\ntype Technical struct &#123;\n\tmediator *Mediator\n&#125;\n\nfunc (t *Technical) SendMess(message string) &#123;\n\tt.mediator.ForwardMessage(t, message)\n&#125;\n\nfunc (t *Technical) GetMess(message string) &#123;\n\tfmt.Printf(&quot;技术部收到消息: %s\\n&quot;, message)\n&#125;\n\n&#x2F;&#x2F; 定义市场部\ntype Market struct &#123;\n\tmediator *Mediator\n&#125;\n\nfunc (m *Market) SendMess(message string) &#123;\n\tm.mediator.ForwardMessage(m, message)\n&#125;\n\nfunc (m *Market) GetMess(message string) &#123;\n\tfmt.Printf(&quot;市场部部收到消息: %s\\n&quot;, message)\n&#125;\n\nfunc main() &#123;\n\tm :&#x3D; NewMediator()\n\n\tmarket :&#x3D; &amp;Market&#123;mediator: m&#125;\n\ttec :&#x3D; &amp;Technical&#123;mediator: m&#125;\n\n\tm.SetTec(tec)\n\tm.SetMarket(market)\n\n\tmarket.SendMess(&quot;hallo world&quot;)\n&#125;</code></pre>","text":"中介者模式是用来封装对象与对象之间的交互，使依赖变简单，使复杂交互简单化，封装在中介者中，显而易见的缺点就是，由于逻辑封装在中介者中，所以中介者以后会越来越复杂 package main import &quot;fmt&quot; &#x2F;&#x2F; 定义中介者类 typ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之观察者模式","uid":"53fbeba8ed5d161cf25f38b1905c9c66","slug":"golang/dp/理解设计模式之观察者模式","date":"2020-10-26T09:55:25.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之观察者模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"观察者模式比较好理解，就是字面意思，其实和发布订阅差不多。举一个学生订阅课程的例子 package main &#x2F;&#x2F; 定义课程接口 type ISubject interface &#123; Attach(IObserver) &#x2F;&#x2F; 添加观...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之桥接模式","uid":"4e7dab327a16c4ff4445f675a754b4bd","slug":"golang/dp/理解设计模式之桥接模式","date":"2020-10-26T06:54:02.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之桥接模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"桥接模式分离抽象部分和实现部分。使得两部分可以独立扩展。 package main import &quot;fmt&quot; &#x2F;&#x2F; 抽象消息接口 定义具体的消息类型 type AbsMessage interface &#123; SendMessage(...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}