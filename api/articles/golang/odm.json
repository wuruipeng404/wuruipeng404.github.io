{"title":"封装易用的 Golang Odm","uid":"235660ba99baa3b7d4208214f0acb547","slug":"golang/odm","date":"2021-06-12T04:12:37.000Z","updated":"2022-03-13T03:49:44.819Z","comments":true,"path":"api/articles/golang/odm.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>在golang中目前需要对mongodb进行操作会接触到如下两个库</p>\n<p><a href=\"https://github.com/mongodb/mongo-go-driver\">mongo-go-driver mongodb官方出的驱动</a><br><a href=\"https://github.com/go-mgo/mgo\">mgo</a></p>\n<p>mgo 很久没有维护了. 所以现在大家基本上都在使用官方的driver,但是官方的driver用下来,有一些痛点.所以我决定封装一下.使其用起来像gorm那样更方便一点</p>\n<span id=\"more\"></span>\n\n<h3 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h3><ol>\n<li>driver对象每次使用都需要手动指定collection名称 而不能通过已经定义好的结构体进行映射</li>\n<li>虽然可以通过结构体的 tag <code>bson</code> 进行标注, 但是这个标注,在有些方法中是不能通过结构体自行判断filter字段的, 只能通过bson.M 这个结构去传递</li>\n<li>查询后的结果也没有一个便捷的方法去进行接收,就像 json.Unmarshal() 那样</li>\n</ol>\n<h3 id=\"mongoose\"><a href=\"#mongoose\" class=\"headerlink\" title=\"mongoose\"></a><a href=\"https://github.com/wuruipeng404/mongoose\">mongoose</a></h3><p>代码取名 mongoose, 这个是因为最近刚好在用nodejs的 mongoose 也就直接拿过来用了.<br>实现的方式主要还是反射, 详情看源码吧.</p>\n<p>一些例子</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n\t&quot;context&quot;\n\t&quot;log&quot;\n\t&quot;github.com&#x2F;wuruipeng404&#x2F;mongoose&quot;\n\t&quot;go.mongodb.org&#x2F;mongo-driver&#x2F;bson&quot;\n)\n\nvar odm *mongoose.Mongo\n\n&#x2F;&#x2F; get mongo client\nfunc init() &#123;\n\n\tvar err error\n\n\tif odm, err &#x3D; mongoose.Open(&amp;mongoose.Options&#123;\n\t\tUser:       &quot;user&quot;,\n\t\tPassword:   &quot;password&quot;,\n\t\tHost:       &quot;localhost&quot;,\n\t\tPort:       27017,\n\t\tDBName:     &quot;your-db&quot;,\n\t\tDriverOpts: nil, &#x2F;&#x2F; and you can add driver client options\n\t&#125;); err !&#x3D; nil &#123;\n\t\tlog.Fatalf(&quot;connect mongoose failed:%s&quot;, err)\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; define your schema\ntype YourSchema struct &#123;\n\tmongoose.Document &#96;bson:&quot;,inline&quot;&#96;\n\tFieldA            string     &#96;bson:&quot;field_a,omitempty&quot;&#96;\n\tFieldB            int        &#96;bson:&quot;field_b,omitempty&quot;&#96;\n\tSon               *SubSchema &#96;bson:&quot;son,omitempty&quot;&#96;\n\t*SubSchema        &#96;bson:&quot;,inline&quot;&#96; &#x2F;&#x2F; inline field\n&#125;\n\ntype SubSchema struct &#123;\n\tFieldC string &#96;bson:&quot;field_c,omitempty&quot;&#96;\n\tFieldD string &#96;bson:&quot;field_d,omitempty&quot;&#96;\n&#125;\n\n&#x2F;&#x2F; CollectionName impl mongoose.IDocument interface\nfunc (*YourSchema) CollectionName() string &#123;\n\treturn &quot;your_collection&quot;\n&#125;\n\nfunc Create() &#123;\n\t&#x2F;&#x2F; will auto add create time for now , and also you can set your time \n\t&#x2F;&#x2F; and all create method will auto find collection name\n\todm.InsertOne(&amp;YourSchema&#123;\n\t\tFieldA: &quot;test&quot;,\n\t\tFieldB: 3,\n\t\tSubSchema: &amp;SubSchema&#123;\n\t\t\tFieldC: &quot;111&quot;,\n\t\t\tFieldD: &quot;222&quot;,\n\t\t&#125;,\n\t&#125;)\n\n\t&#x2F;&#x2F; if your want to use driver method\n\todm.DriverCollection(&quot;your collection&quot;).InsertOne(bson.M&#123;&#125;)\n&#125;\n\nfunc HaveFilterMethod() &#123;\n\t&#x2F;&#x2F; update find delete\n\t&#x2F;&#x2F; id support string (primitive.ObjectID.hex()) and ObjectID\n\tvar result YourSchema\n\todm.FindByID(id, &amp;result)\n\n\t&#x2F;&#x2F; filter support bson and IDocument\n\t&#x2F;&#x2F; This is equivalent\n\tvar result2 []YourSchema\n\todm.Find(YourSchema&#123;FieldA: &quot;zhangsan&quot;&#125;, &amp;result2)\n\todm.Find(bson.M&#123;&quot;field_a&quot;: &quot;zhangsan&quot;&#125;, &amp;result2)\n\t&#x2F;&#x2F; this is sugar\n\todm.Find(mongoose.Eq(&quot;field_a&quot;, &quot;zhangsan&quot;), &amp;result2)\n&#125;\n\n\n&#x2F;&#x2F; release client\nfunc Close() &#123;\n\todm.Release(context.TODO())\n&#125;</code></pre>\n\n<h3 id=\"todo-目前只实现了一些常用功能-还有一些其他的方法需要被实现\"><a href=\"#todo-目前只实现了一些常用功能-还有一些其他的方法需要被实现\" class=\"headerlink\" title=\"todo: 目前只实现了一些常用功能. 还有一些其他的方法需要被实现.\"></a>todo: 目前只实现了一些常用功能. 还有一些其他的方法需要被实现.</h3>","text":"在golang中目前需要对mongodb进行操作会接触到如下两个库 mongo-go-driver mongodb官方出的驱动mgo mgo 很久没有维护了. 所以现在大家基本上都在使用官方的driver,但是官方的driver用下来,有一些痛点.所以我决定封装一下.使其用起来像...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"go","slug":"go","count":5,"path":"api/categories/go.json"},{"name":"mongo","slug":"go/mongo","count":1,"path":"api/categories/go/mongo.json"}],"tags":[{"name":"go","slug":"go","count":7,"path":"api/tags/go.json"},{"name":"mongodb","slug":"mongodb","count":1,"path":"api/tags/mongodb.json"},{"name":"odm","slug":"odm","count":1,"path":"api/tags/odm.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%97%9B%E7%82%B9\"><span class=\"toc-text\">痛点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mongoose\"><span class=\"toc-text\">mongoose</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#todo-%E7%9B%AE%E5%89%8D%E5%8F%AA%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD-%E8%BF%98%E6%9C%89%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E7%9A%84%E6%96%B9%E6%B3%95%E9%9C%80%E8%A6%81%E8%A2%AB%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">todo: 目前只实现了一些常用功能. 还有一些其他的方法需要被实现.</span></a></li></ol>","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"http,https,http2,RPC,gRPC,Socket,WebSocket都是些啥","uid":"d71352f907ccd4a5fa2d2fd4965d3b21","slug":"basic/proto","date":"2021-08-12T06:07:20.000Z","updated":"2022-03-13T05:26:15.045Z","comments":true,"path":"api/articles/basic/proto.json","keywords":"golang rust python docker k8s","cover":[],"text":"首先回顾下计算机网络的五(七)层协议：物理层、数据链路层、网络层、传输层、(会话层、表示层)和应用层 http http,https,http2 (统称http) 是应用层协议，主要解决如何包装数据（文本信息），是建立在TCP协议之上的应用。那么这个s,和2分别指的什么呢我们来先...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"计算机基础","slug":"计算机基础","count":3,"path":"api/categories/计算机基础.json"},{"name":"网络基础","slug":"计算机基础/网络基础","count":2,"path":"api/categories/计算机基础/网络基础.json"}],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"feature":true},"next_post":{"title":"git大文件清理","uid":"f94977f1a3a66c5c3bdaffeeae361df5","slug":"guide/git大文件清理","date":"2021-05-13T07:43:51.000Z","updated":"2022-03-13T04:50:21.605Z","comments":true,"path":"api/articles/guide/git大文件清理.json","keywords":"golang rust python docker k8s","cover":[],"text":"在git仓库当中,一般是不需要把比较大的静态文件,比如压缩包 二级制文件放进仓库做追踪的但是有时候难免因为个人操作失误, 或者团队中来了新人 不小心给提交进去了,这个时候怎么办呢今天发现了使其操作简便一个工具,来推荐给大家 bfg-repo-cleaner是一个用java写的清理...","link":"","photos":[],"count_time":{"symbolsCount":177,"symbolsTime":"1 mins."},"categories":[{"name":"操作指南","slug":"操作指南","count":6,"path":"api/categories/操作指南.json"}],"tags":[{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}