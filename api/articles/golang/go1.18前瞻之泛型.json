{"title":"go1.18前瞻之泛型","uid":"355acc7cda3fb3449ceab3d92d6655e4","slug":"golang/go1.18前瞻之泛型","date":"2022-03-13T08:02:15.000Z","updated":"2022-03-13T08:36:03.738Z","comments":true,"path":"api/articles/golang/go1.18前瞻之泛型.json","keywords":"golang rust python docker k8s","cover":[],"content":"<p>早在一年以前就听说golang要增加泛型, 本来说1.18正式版二月份就发布了, 结果现在看来还是被鸽了,但是我们依然可以用测试版来尝尝鲜</p>\n<span id=\"more\"></span>\n<h3 id=\"1-安装-go1-18beta版本\"><a href=\"#1-安装-go1-18beta版本\" class=\"headerlink\" title=\"1. 安装 go1.18beta版本\"></a>1. 安装 go1.18beta版本</h3><ul>\n<li><p>目前最新的是beta2所以我们安装这个.</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go install golang.org&#x2F;dl&#x2F;go1.18beta2@latest</code></pre>\n</li>\n<li><p>执行完上面的命令继续执行</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go1.18beta2 download</code></pre>\n<p>如果提示命令没找到,添加一下环境变量吧 <code>$&#123;HOME&#125;/go/bin</code></p>\n</li>\n<li><p>然后执行</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">go1.18beta2 download</code></pre>\n<p>准备工作已完成</p>\n</li>\n</ul>\n<h3 id=\"2-创建一个项目\"><a href=\"#2-创建一个项目\" class=\"headerlink\" title=\"2. 创建一个项目\"></a>2. 创建一个项目</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mkdir generics &amp;&amp; cd generics &amp;&amp; go1.18beta2 mod init generics</code></pre>\n\n<h3 id=\"3-正式敲代码啦\"><a href=\"#3-正式敲代码啦\" class=\"headerlink\" title=\"3. 正式敲代码啦\"></a>3. 正式敲代码啦</h3><ul>\n<li><p>我们先敲一个没有泛型时候的函数</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nfunc main()&#123;\n\n&#125;\n\nfunc SumInts(m map[string]int64)int64&#123;\n    var s int64\n    for _, v :&#x3D; range m &#123;\n        s +&#x3D; v\n    &#125;\n    return s\n&#125;\n\nfunc SumFloats(m map[string]float64)float64&#123;\n    var s float64\n    for _, v :&#x3D; range m &#123;\n        s +&#x3D; v\n    &#125;\n    return s\n&#125;\n</code></pre>\n<p>可以看到每当我们增加一种新的类型时,都需要额外添加一个函数签名,而他们的不同仅仅是参数返回值的类型不一样而已,这样真的是太蠢了,毕竟泛型也不是什么新鲜玩意,其他语言早就有了不是.</p>\n</li>\n<li><p>接下来我们看看有了泛型之后的代码</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nfunc main()&#123;\n\n&#125;\n\nfunc SumIntsAndFloats[K comparable, V int64 | float64](m map[K]V) V &#123;\n    var s V\n    for _, v :&#x3D; range m &#123;\n        s +&#x3D; v\n    &#125;\n    return s\n&#125;\n</code></pre>\n<p>那么从代码来看就一目了然了,泛型的基本语法, 在golang中泛型采用了 <code>[]</code> 而不是 <code>&lt;&gt;</code>, 可以查看这篇帖子<a href=\"https://groups.google.com/g/golang-nuts/c/7t-Q2vt60J8\">https://groups.google.com/g/golang-nuts/c/7t-Q2vt60J8</a>, 其实简单来说就是为了编译器方便</p>\n</li>\n<li><p>我们可以看到泛型参数中 用 <code>comparable</code> 声明了K的类型, <code>comparable</code> 是1.18新增的内置类型 <img src=\"/images/golang/comparable.png\" alt=\"comparable\">简单来说就是 之前在代码中所有可以用于 <code>==</code> 或者 <code>!=</code>的类型,现在都属于<code>comparable</code></p>\n</li>\n<li><p>而V的类型 是使用<code>|</code> 标明的 联合类型 这里包括 <code>int64</code>和<code>float64</code>. 而联合类型还有下面这种写法</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">type Number interface&#123;\n    int64 | float64\n&#125;\n</code></pre>\n</li>\n<li><p>下面我们来调用泛型参数</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\t&#x2F;&#x2F; Initialize a map for the integer values\n\tints :&#x3D; map[string]int64&#123;\n\t\t&quot;first&quot;:  34,\n\t\t&quot;second&quot;: 12,\n\t&#125;\n\n\t&#x2F;&#x2F; Initialize a map for the float values\n\tfloats :&#x3D; map[string]float64&#123;\n\t\t&quot;first&quot;:  35.98,\n\t\t&quot;second&quot;: 26.99,\n\t&#125;\n\n\ta :&#x3D; SumIntsOrFloats[string, int64](ints)\n\tfmt.Println(&quot;int&quot;, a)\n\n\tb :&#x3D; SumIntsOrFloats[string, float64](floats)\n\tfmt.Println(&quot;float&quot;, b)\n\n&#125;</code></pre>\n<p>在调用的时候可以填写类型参数, 但一般情况下是不用写的,因为编译器会自动推导类型</p>\n</li>\n</ul>\n","feature":true,"text":"早在一年以前就听说golang要增加泛型, 本来说1.18正式版二月份就发布了, 结果现在看来还是被鸽了,但是我们依然可以用测试版来尝尝鲜 1. 安装 go1.18beta版本 目前最新的是beta2所以我们安装这个. go install golang.org&#x2F;dl&...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"go","slug":"go","count":5,"path":"api/categories/go.json"}],"tags":[{"name":"go","slug":"go","count":7,"path":"api/tags/go.json"},{"name":"泛型","slug":"泛型","count":1,"path":"api/tags/泛型.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85-go1-18beta%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">1. 安装 go1.18beta版本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2. 创建一个项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%AD%A3%E5%BC%8F%E6%95%B2%E4%BB%A3%E7%A0%81%E5%95%A6\"><span class=\"toc-text\">3. 正式敲代码啦</span></a></li></ol>","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"推荐一些我觉得比较有意思的开源项目","uid":"e32e933f33758e391059ab380b68ec99","slug":"config/project","date":"2021-10-12T12:31:56.000Z","updated":"2022-03-13T05:27:54.400Z","comments":true,"path":"api/articles/config/project.json","keywords":"golang rust python docker k8s","cover":null,"text":" name description mkcert 在本地快速搭建https环境 grmon 命令行监控goroutine Golang版本的diagrams 用代码画图 lazykube 在终端用鼠标管理k8s集群 pyroscope 用来分析程序的性能问题 bubbletea ...","link":"","photos":[],"count_time":{"symbolsCount":300,"symbolsTime":"1 mins."},"categories":[{"name":"go","slug":"go","count":5,"path":"api/categories/go.json"}],"tags":[{"name":"go","slug":"go","count":7,"path":"api/tags/go.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"feature":true}}