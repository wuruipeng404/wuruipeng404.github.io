{"title":"理解设计模式之责任链模式","uid":"4d590d0702a24ddaf8b311434285f6b8","slug":"golang/dp/理解设计模式之责任链模式","date":"2020-10-27T07:56:07.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之责任链模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>责任链模式：分离不同职责 动态的组合相关责任链<br>责任链上的处理者负责处理请求。客户端只需要发送即可<br>这里举一个 通俗易懂的例子，叫家人帮我买手机！</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 定义一个购买手机的需求\ntype Require struct &#123;\n\tphone string\n\tprice int\n&#125;\n\n&#x2F;&#x2F; 定义处理请求的接口\ntype Handler interface &#123;\n\tProcessRequire(require *Require)\n&#125;\n\n&#x2F;&#x2F; 定义一系列可以帮我买手机的家人们\n&#x2F;&#x2F; 当前的处理者处理不了请求,就要传给下一位,因此每位处理者需要保存下一位处理者的指针\ntype (\n\tFather struct &#123;\n\t\tnext Handler\n\t&#125;\n\n\tMother struct &#123;\n\t\tnext Handler\n\t&#125;\n\n\tGrandFather struct &#123;\n\t\tnext Handler\n\t&#125;\n\n\tGrandMother struct &#123;\n\t&#125;\n)\n\nfunc (h *Father) ProcessRequire(require *Require) &#123;\n\n\tif require &#x3D;&#x3D; nil &#123;\n\t\treturn\n\t&#125;\n\n\tif require.price &lt;&#x3D; 500 &#123;\n\t\tfmt.Println(&quot;爸爸帮你买了!&quot;)\n\t&#125; else &#123;\n\t\th.next.ProcessRequire(require)\n\t\tfmt.Println(&quot;爸爸买不起交给妈妈&quot;)\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 略</code></pre>\n","text":"责任链模式：分离不同职责 动态的组合相关责任链责任链上的处理者负责处理请求。客户端只需要发送即可这里举一个 通俗易懂的例子，叫家人帮我买手机！ package main import &quot;fmt&quot; &#x2F;&#x2F; 定义一个购买手机的需求 type Re...","link":"","photos":[],"count_time":{"symbolsCount":872,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"理解设计模式之访问者模式","uid":"6861080263609c8f32ead8d0fe52b3fb","slug":"golang/dp/理解设计模式之访问者模式","date":"2020-10-27T08:17:55.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之访问者模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"访问者模式主要是为了解决 稳定数据结构与变化的数据操作 耦合的问题。可以给一系列对象透明的添加功能，并且把相关代码封装到一个类中。对象只要预留访问者接口Accept则后期为对象添加功能的时候就不需要改动对象。 package main import &quot;fmt&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"理解设计模式之解释器模式","uid":"f06ad8235feac5c0bb5f9c61b04ab4af","slug":"golang/dp/理解设计模式之解释器模式","date":"2020-10-27T07:28:27.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之解释器模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"解释器模式定义一套语言文法，并设计该语言解释器，使用户能使用特定文法控制解释器行为。解释器模式的意义在于，它分离多种复杂功能的实现，每个功能只需关注自身的解释。对于调用者不用关心内部的解释器的工作，只需要用简单的方式组合命令就可以。 package main import &qu...","link":"","photos":[],"count_time":{"symbolsCount":821,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}