{"title":"理解设计模式之适配器模式","uid":"81dbbf6776f0e83a5de64679463cd385","slug":"golang/dp/理解设计模式之适配器模式","date":"2020-10-26T03:20:15.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之适配器模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>适配器模式用于转换一种接口适配另一种接口。</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; Target 是适配的目标接口\ntype Target interface &#123;\n\tRequest() string\n&#125;\n\n&#x2F;&#x2F; AdapTee 是被适配的目标接口\ntype AdapTee interface &#123;\n\tSpecificRequest() string\n&#125;\n\n&#x2F;&#x2F; NewAdapTee 是被适配接口的工厂函数\nfunc NewAdapTee() AdapTee &#123;\n\treturn &amp;adapTeeImpl&#123;&#125;\n&#125;\n\n&#x2F;&#x2F; adapTeeImpl 是被适配的目标类\ntype adapTeeImpl struct&#123;&#125;\n\n&#x2F;&#x2F; SpecificRequest 是目标类的一个方法\nfunc (*adapTeeImpl) SpecificRequest() string &#123;\n\treturn &quot;adaptee SpecificRequest method&quot;\n&#125;\n\n&#x2F;&#x2F; NewAdapter 是Adapter的工厂函数\nfunc NewAdapter(adp AdapTee) Target &#123;\n\treturn &amp;adapter&#123;\n\t\tAdapTee: adp,\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; Adapter 是转换AdapTee为Target接口的适配器\ntype adapter struct &#123;\n\tAdapTee\n&#125;\n\n&#x2F;&#x2F; Request 实现Target接口\nfunc (a *adapter) Request() string &#123;\n\treturn a.SpecificRequest()\n&#125;\n\nfunc main() &#123;\n\tfmt.Println(NewAdapter(NewAdapTee()).Request())\n&#125;</code></pre>\n\n<p>实际使用中AdapTee一般为接口，并且使用工厂函数生成实例。</p>\n<p>在Adapter中匿名组合AdapTee接口，所以Adapter类也拥有SpecificRequest实例方法<br>又因为Go语言中非入侵式接口特征，其实Adapter也适配AdapTee接口</p>\n","text":"适配器模式用于转换一种接口适配另一种接口。 package main import &quot;fmt&quot; &#x2F;&#x2F; Target 是适配的目标接口 type Target interface &#123; Request() string &#125; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之代理模式","uid":"0cc18532576f0420deb16181e5056f24","slug":"golang/dp/理解设计模式之代理模式","date":"2020-10-26T03:26:47.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之代理模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"代理模式用于延迟处理操作或者在进行实际操作前后进行其它处理。 package main import &quot;fmt&quot; type Work interface &#123; Do() string &#125; type RealWork struct&#123;&...","link":"","photos":[],"count_time":{"symbolsCount":708,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之外观模式","uid":"9b3ae101f06841603467d83a4a546e9c","slug":"golang/dp/理解设计模式之外观模式","date":"2020-10-26T02:52:42.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之外观模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"外观模式的主要作用是 减少客户端与系统内部交互的复杂性，对子系统的一系列接口，提供一个一致性的界面，方便调用 package main import &quot;fmt&quot; func NewAPI() FacadeAPI &#123; return &amp;apiImp...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}