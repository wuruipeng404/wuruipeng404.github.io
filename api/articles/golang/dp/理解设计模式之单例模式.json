{"title":"理解设计模式之单例模式","uid":"1602c992a6a28c4ed33dd66720a6bf2e","slug":"golang/dp/理解设计模式之单例模式","date":"2020-10-23T12:05:12.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之单例模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>go语言中的单例模式简单到没啥可说的。</p>\n<p>正常创建一个全局变量就是，单例<br>为了线程安全你可以加锁，这里直接使用sync.once,原理一样。</p>\n<span id=\"more\"></span>\n<ol>\n<li><p>go</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;sync&quot;\n\ntype Singleton struct&#123;&#125;\n\nvar singleton *Singleton\n\nfunc GetInstance() *Singleton &#123;\n\tonce :&#x3D; sync.Once&#123;&#125;\n\n\tif singleton &#x3D;&#x3D; nil &#123;\n\t\tonce.Do(func() &#123;\n\t\t\tsingleton &#x3D; &amp;Singleton&#123;&#125;\n\t\t&#125;)\n\t&#125;\n\treturn singleton\n&#125;\n\nfunc main() &#123;\n\tGetInstance()\n&#125;</code></pre>\n</li>\n<li><p>python</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Signleton(object):\n\n    def __init__(self):\n        pass\n\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(cls, &#39;_instance&#39;):\n            # cls._instance &#x3D; object.__new__(cls)\n            cls._instance &#x3D; super(Signleton, cls).__new__(cls, *args, **kwargs)\n\n        return cls._instance\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    a &#x3D; Signleton()\n    b &#x3D; Signleton()\n\n    print(id(a))\n    print(id(b))</code></pre></li>\n</ol>\n","text":"go语言中的单例模式简单到没啥可说的。 正常创建一个全局变量就是，单例为了线程安全你可以加锁，这里直接使用sync.once,原理一样。 go package main import &quot;sync&quot; type Singleton struct&#123;&#12...","link":"","photos":[],"count_time":{"symbolsCount":906,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"toc":"","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"理解设计模式之原型模式","uid":"ff7986bd3e13e58f395ae3555d928c50","slug":"golang/dp/理解设计模式之原型模式","date":"2020-10-23T12:08:31.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之原型模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"原型模式和其他创建型模式不一样的是，它是复制一个已有对象，而不是创建一个新对象，被复制的对象就叫做原型。原型模式多用于建造复杂或者耗时的对象，这样直接复制会比较高效。原型对象一般会配合原型管理器一起使用 go package main import ( &quot;fmt&quo...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"理解设计模式之建造者模式","uid":"c3aea0285a3783cfb28818d4df287ed0","slug":"golang/dp/理解设计模式之建造者模式","date":"2020-10-23T11:05:37.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之建造者模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"建造者模式主要作用是解耦了创建的过程,将一个复杂对象的创建过程分步完成.下面来讲两种风格的建造者模式 gopackage main import &quot;fmt&quot; &#x2F;&#x2F; 1.传统类型: 由指挥者指挥建造者创建具体的对象 &#x2F;&#x2F; ...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}