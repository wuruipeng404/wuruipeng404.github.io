{"title":"理解设计模式之观察者模式","uid":"53fbeba8ed5d161cf25f38b1905c9c66","slug":"golang/dp/理解设计模式之观察者模式","date":"2020-10-26T09:55:25.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之观察者模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>观察者模式比较好理解，就是字面意思，其实和发布订阅差不多。<br>举一个学生订阅课程的例子</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\n&#x2F;&#x2F; 定义课程接口\ntype ISubject interface &#123;\n\tAttach(IObserver) &#x2F;&#x2F; 添加观察者方法\n\tNotify()          &#x2F;&#x2F; 通知接口\n\tUpdateTime(time string)\n&#125;\n\n&#x2F;&#x2F; 定义课程类\ntype Subject struct &#123;\n\tobservers []IObserver\n\tname      string &#x2F;&#x2F; 课程名称\n\ttime      string &#x2F;&#x2F; 上课时间\n&#125;\n\nfunc NewSubject(name string) ISubject &#123;\n\treturn &amp;Subject&#123;\n\t\tobservers: make([]IObserver, 0),\n\t\tname:      name,\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; 添加观察者\nfunc (s *Subject) Attach(o IObserver) &#123;\n\ts.observers &#x3D; append(s.observers, o)\n&#125;\n\n&#x2F;&#x2F; 通知观察者进行改变\nfunc (s *Subject) Notify() &#123;\n\tfor _, o :&#x3D; range s.observers &#123;\n\t\to.Update(s)\n\t&#125;\n&#125;\n\nfunc (s *Subject) UpdateTime(time string) &#123;\n\ts.time &#x3D; time\n&#125;\n\n&#x2F;&#x2F; 定义观察者类\ntype IObserver interface &#123;\n\tUpdate(subject ISubject)\n&#125;\n\ntype Student struct &#123;\n\tname string\n\tsub  ISubject\n&#125;\n\nfunc (s *Student) Update(subject ISubject) &#123;\n\ts.sub &#x3D; subject\n&#125;\n\nfunc main() &#123;\n\tsbj :&#x3D; NewSubject(&quot;线性代数&quot;)\n\tlily :&#x3D; &amp;Student&#123;name: &quot;lily&quot;&#125;\n\n\tsbj.Attach(lily)\n\tsbj.UpdateTime(&quot;12点半&quot;)\n\t&#x2F;&#x2F; ...\n&#125;</code></pre>","text":"观察者模式比较好理解，就是字面意思，其实和发布订阅差不多。举一个学生订阅课程的例子 package main &#x2F;&#x2F; 定义课程接口 type ISubject interface &#123; Attach(IObserver) &#x2F;&#x2F; 添加观...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之命令模式","uid":"2f495e9970023abb3de380eead14299f","slug":"golang/dp/理解设计模式之命令模式","date":"2020-10-26T10:05:50.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之命令模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"命令模式本质是把某个对象的方法调用封装到对象中，方便传递、存储、调用。 示例中把主板单中的启动(start)方法和重启(reboot)方法封装为命令对象，再传递到主机(box)对象中。于两个按钮进行绑定： 第一个机箱(box1)设置按钮1(buttion1) 为开机按钮2(but...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之中介者模式","uid":"2f29c37507db5ca2a228334b44c7a06a","slug":"golang/dp/理解设计模式之中介者模式","date":"2020-10-26T09:39:55.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之中介者模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"中介者模式是用来封装对象与对象之间的交互，使依赖变简单，使复杂交互简单化，封装在中介者中，显而易见的缺点就是，由于逻辑封装在中介者中，所以中介者以后会越来越复杂 package main import &quot;fmt&quot; &#x2F;&#x2F; 定义中介者类 typ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}