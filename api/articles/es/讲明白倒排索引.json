{"title":"讲明白倒排索引","uid":"e31f27ca5c997bccd8e8b4c8d00251b5","slug":"es/讲明白倒排索引","date":"2020-10-28T09:24:17.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/es/讲明白倒排索引.json","keywords":"golang rust python docker k8s","cover":[],"content":"<p>要搞明白倒排索引我们就要先搞明白什么是正排索引</p>\n<ol>\n<li><p>对于搜索引擎来讲，正排索引是文档id到文档内容以及单词的关联关系，也就是说通过id获取到文档的内容，如果拿关系型数据库来解释就是下面这条SQL</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select * from human where id &#x3D; 3;</code></pre>\n<span id=\"more\"></span>\n</li>\n<li><p>倒排索引 是通过单词 找到文档id 这一过程，然后再使用正排索引 通过id找到文档内容返回给搜索用户。</p>\n</li>\n<li><p>在倒排索引中有这么几个概念</p>\n<ol>\n<li>单词（Term）: 一段文本经过分词器分词后就会得到一系列的单词</li>\n<li>单词词典（Term Dictionary）: 记录所有的文档分词后的结果，顾名思义就是维护 单词（Term）</li>\n<li>单词索引(Term Index) : 为了更快找出单词，给单词简历索引</li>\n<li>倒排列表（Posting List）: 记录了单词对应文档的集合，由倒排项（Posting）组成</li>\n<li>倒排项（Posting）: 倒排项主要包含以下信息<ol>\n<li>文档ID ：用于获取原始文档信息</li>\n<li>单词频率（TF，Term Frequency）: 记录该单词在文档中出现的次数</li>\n<li>位置（Position）: 记录单词在文档中的分词位置，用于词语搜索</li>\n<li>偏移量（Offset）: 记录单词在文档的开始和结束位置，用于高亮显示</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>这里用一张图<br><img src=\"/images/es/index.jpeg\" alt=\"倒排索引\"></p>\n<p>用通俗的话来描述整个流程就是</p>\n<p>我们拿着 <code>单词词典</code> 通过 <code>单词索引</code> 找到 <code>单词</code>，找到 <code>单词</code> 就可以找到对应的 <code>文档列表</code>，然后通过<code>文档列表</code>中的数据进行一系列的计算，做一个优先级排序，或者叫评分排序，评分越高则在最前面，最后将所有结果返回。</p>\n","text":"要搞明白倒排索引我们就要先搞明白什么是正排索引 对于搜索引擎来讲，正排索引是文档id到文档内容以及单词的关联关系，也就是说通过id获取到文档的内容，如果拿关系型数据库来解释就是下面这条SQL select * from human where id &#x3D; 3; 倒排索引 ...","link":"","photos":[],"count_time":{"symbolsCount":663,"symbolsTime":"1 mins."},"categories":[{"name":"es","slug":"es","count":2,"path":"api/categories/es.json"}],"tags":[{"name":"倒排索引","slug":"倒排索引","count":1,"path":"api/tags/倒排索引.json"}],"toc":"","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"MySQL8的新特性","uid":"c9eed3f9b00e09f8e1c1149f26ce6969","slug":"mysql/MySQL8的新特性","date":"2020-10-29T07:36:48.000Z","updated":"2021-12-11T02:10:04.780Z","comments":true,"path":"api/articles/mysql/MySQL8的新特性.json","keywords":"golang rust python docker k8s","cover":[],"text":"MySQL的版本一下子跳跃这么大，用手指想就有很多新的东西了。下面我们就来详细了解一下。 1. 秒级加列 分别在5.7与8.0中有一张 test 表，数据为3000w行 # mysql8.0.22 mysql&gt; alter table test add str varcha...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"MySQL","slug":"MySQL","count":4,"path":"api/categories/MySQL.json"}],"tags":[{"name":"mysql","slug":"mysql","count":4,"path":"api/tags/mysql.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"关于RabbitMQ消息队列的可靠性传输","uid":"bd281a987a5c824ac404d854e69b882e","slug":"mq/关于RabbitMQ消息队列的可靠性传输","date":"2020-10-28T05:21:20.000Z","updated":"2021-12-11T02:10:04.780Z","comments":true,"path":"api/articles/mq/关于RabbitMQ消息队列的可靠性传输.json","keywords":"golang rust python docker k8s","cover":null,"text":"在使用消息队列的过程中如何保证消息的可靠性呢？这个问题其实包含了几方面的小问题。 数据丢失问题 数据幂等性的问题 重复消费的问题 我们知道在使用消息队列的时候是必然有三个角色的，生产者，消费者，以及MQ本身。那么数据丢失无非就以下几种情况 生产者传输给MQ 这个过程丢失数据，导致...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"消息队列","slug":"消息队列","count":1,"path":"api/categories/消息队列.json"}],"tags":[{"name":"rabbitmq","slug":"rabbitmq","count":1,"path":"api/tags/rabbitmq.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}