{"title":"理解设计模式之命令模式","uid":"2f495e9970023abb3de380eead14299f","slug":"golang/dp/理解设计模式之命令模式","date":"2020-10-26T10:05:50.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之命令模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>命令模式本质是把某个对象的方法调用封装到对象中，方便传递、存储、调用。</p>\n<p>示例中把主板单中的启动(start)方法和重启(reboot)方法封装为命令对象，再传递到主机(box)对象中。于两个按钮进行绑定：</p>\n<p>第一个机箱(box1)设置按钮1(buttion1) 为开机按钮2(buttion2)为重启。<br>第二个机箱(box2)设置按钮2(buttion2) 为开机按钮1(buttion1)为重启。<br>从而得到配置灵活性。</p>\n<p>除了配置灵活外，使用命令模式还可以用作：</p>\n<ul>\n<li>批处理</li>\n<li>任务队列</li>\n<li>undo, redo<br>等把具体命令封装到对象中使用的场合</li>\n</ul>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 定义命令接口\ntype ICommand interface &#123;\n\tExecute()\n&#125;\n\n&#x2F;&#x2F; 定义开机命令类\ntype StartCommand struct &#123;\n\tmb *MotherBoard\n&#125;\n\n&#x2F;&#x2F; 构造方法\nfunc NewStartCommand(mb *MotherBoard) *StartCommand &#123;\n\treturn &amp;StartCommand&#123;\n\t\tmb: mb,\n\t&#125;\n&#125;\n\nfunc (c *StartCommand) Execute() &#123;\n\tc.mb.Start()\n&#125;\n\n&#x2F;&#x2F; 定义重启命令类\ntype RebootCommand struct &#123;\n\tmb *MotherBoard\n&#125;\n\nfunc NewRebootCommand(mb *MotherBoard) *RebootCommand &#123;\n\treturn &amp;RebootCommand&#123;\n\t\tmb: mb,\n\t&#125;\n&#125;\n\nfunc (c *RebootCommand) Execute() &#123;\n\tc.mb.Reboot()\n&#125;\n\n&#x2F;&#x2F; 定义主板\ntype MotherBoard struct&#123;&#125;\n\nfunc (*MotherBoard) Start() &#123;\n\tfmt.Println(&quot;system starting&quot;)\n&#125;\n\nfunc (*MotherBoard) Reboot() &#123;\n\tfmt.Println(&quot;system rebooting&quot;)\n&#125;\n\n&#x2F;&#x2F; 定义机箱\ntype Box struct &#123;\n\tbutton1 ICommand\n\tbutton2 ICommand\n&#125;\n\nfunc NewBox(button1, button2 ICommand) *Box &#123;\n\treturn &amp;Box&#123;\n\t\tbutton1: button1,\n\t\tbutton2: button2,\n\t&#125;\n&#125;\n\nfunc (b *Box) PressButton1() &#123;\n\tb.button1.Execute()\n&#125;\n\nfunc (b *Box) PressButton2() &#123;\n\tb.button2.Execute()\n&#125;\n\nfunc main() &#123;\n\tmb :&#x3D; &amp;MotherBoard&#123;&#125;\n\tstart :&#x3D; NewStartCommand(mb)\n\treboot :&#x3D; NewRebootCommand(mb)\n\n\tbox :&#x3D; NewBox(start, reboot)\n\tbox.PressButton1()\n\tbox.PressButton2()\n&#125;</code></pre>","text":"命令模式本质是把某个对象的方法调用封装到对象中，方便传递、存储、调用。 示例中把主板单中的启动(start)方法和重启(reboot)方法封装为命令对象，再传递到主机(box)对象中。于两个按钮进行绑定： 第一个机箱(box1)设置按钮1(buttion1) 为开机按钮2(but...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"理解设计模式之迭代器模式","uid":"293d39b9d616d2268ed47b9219110ea6","slug":"golang/dp/理解设计模式之迭代器模式","date":"2020-10-27T01:35:19.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之迭代器模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"迭代器模式，一样的一个字面意思，封装你的对象 对外提供一个迭代器，可以不断迭代你的对象，这样外部无需了解对象的具体实现细节，通过迭代器就可以不断访问下一个元素 package main import &quot;container&#x2F;list&quot; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"理解设计模式之观察者模式","uid":"53fbeba8ed5d161cf25f38b1905c9c66","slug":"golang/dp/理解设计模式之观察者模式","date":"2020-10-26T09:55:25.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之观察者模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"观察者模式比较好理解，就是字面意思，其实和发布订阅差不多。举一个学生订阅课程的例子 package main &#x2F;&#x2F; 定义课程接口 type ISubject interface &#123; Attach(IObserver) &#x2F;&#x2F; 添加观...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}