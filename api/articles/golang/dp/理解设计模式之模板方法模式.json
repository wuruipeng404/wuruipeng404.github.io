{"title":"理解设计模式之模板方法模式","uid":"047033f0c1450db28daf35058b5fd01e","slug":"golang/dp/理解设计模式之模板方法模式","date":"2020-10-27T02:23:35.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之模板方法模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>模版方法模式使用继承机制，把通用步骤和通用方法放到父类中，把具体实现延迟到子类中实现。使得实现符合开闭原则。<br>注意匿名组合虽然像继承，但还是有不一样的地方的。<br>比如，因为父类需要调用子类方法，所以子类需要匿名组合父类的同时，父类需要持有子类的引用</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 定义父类接口\ntype Downloader interface &#123;\n\tDownload(uri string)\n&#125;\n\n&#x2F;&#x2F; 定义模板类(父类)\ntype template struct &#123;\n\timpl &#x2F;&#x2F; 持有子类引用\n\turi  string\n&#125;\n\n&#x2F;&#x2F; 定义子类接口\ntype impl interface &#123;\n\tdownload()\n\tsave()\n&#125;\n\nfunc newTemplate(impl impl) *template &#123;\n\treturn &amp;template&#123;\n\t\timpl: impl,\n\t&#125;\n&#125;\n\nfunc (t *template) Download(uri string) &#123;\n\tt.uri &#x3D; uri\n\tfmt.Print(&quot;prepare downloading\\n&quot;)\n\tt.impl.download()\n\tt.impl.save()\n\tfmt.Print(&quot;finish downloading\\n&quot;)\n&#125;\n\n&#x2F;&#x2F; 默认的保存实现\nfunc (t *template) save() &#123;\n\tfmt.Print(&quot;default save\\n&quot;)\n&#125;\n\n&#x2F;&#x2F; http下载器\ntype HTTPDownloader struct &#123;\n\t*template\n&#125;\n\nfunc NewHTTPDownloader() Downloader &#123;\n\tdownloader :&#x3D; &amp;HTTPDownloader&#123;&#125;\n\ttemplate :&#x3D; newTemplate(downloader)\n\tdownloader.template &#x3D; template\n\treturn downloader\n&#125;\n\nfunc (d *HTTPDownloader) download() &#123;\n\tfmt.Printf(&quot;download %s via http\\n&quot;, d.uri)\n&#125;\n\nfunc (*HTTPDownloader) save() &#123;\n\tfmt.Printf(&quot;http save\\n&quot;)\n&#125;\n\ntype FTPDownloader struct &#123;\n\t*template\n&#125;\n\nfunc NewFTPDownloader() Downloader &#123;\n\tdownloader :&#x3D; &amp;FTPDownloader&#123;&#125;\n\ttemplate :&#x3D; newTemplate(downloader)\n\tdownloader.template &#x3D; template\n\treturn downloader\n&#125;\n\nfunc (d *FTPDownloader) download() &#123;\n\tfmt.Printf(&quot;download %s via ftp\\n&quot;, d.uri)\n&#125;\n\nfunc main() &#123;\n\tNewHTTPDownloader().Download(&quot;xxxxxxx&quot;)\n&#125;</code></pre>","text":"模版方法模式使用继承机制，把通用步骤和通用方法放到父类中，把具体实现延迟到子类中实现。使得实现符合开闭原则。注意匿名组合虽然像继承，但还是有不一样的地方的。比如，因为父类需要调用子类方法，所以子类需要匿名组合父类的同时，父类需要持有子类的引用 package main impor...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"toc":"","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"理解设计模式之策略模式","uid":"8edf5cc3c2cccf16484400f87c198799","slug":"golang/dp/理解设计模式之策略模式","date":"2020-10-27T06:51:40.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之策略模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"策略模式一般是用来封装一系列的算法，让这些算法可以在运行时互换。复合开闭原则 package main import &quot;fmt&quot; &#x2F;&#x2F; 定义付款对象 type Payment struct &#123; context *PaymentCo...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"理解设计模式之迭代器模式","uid":"293d39b9d616d2268ed47b9219110ea6","slug":"golang/dp/理解设计模式之迭代器模式","date":"2020-10-27T01:35:19.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之迭代器模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"迭代器模式，一样的一个字面意思，封装你的对象 对外提供一个迭代器，可以不断迭代你的对象，这样外部无需了解对象的具体实现细节，通过迭代器就可以不断访问下一个元素 package main import &quot;container&#x2F;list&quot; &#x2F;&#...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"行为型设计模式","slug":"行为型设计模式","count":11,"path":"api/tags/行为型设计模式.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}