{"title":"理解设计模式之外观模式","uid":"9b3ae101f06841603467d83a4a546e9c","slug":"golang/dp/理解设计模式之外观模式","date":"2020-10-26T02:52:42.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之外观模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>外观模式的主要作用是 减少客户端与系统内部交互的复杂性，对子系统的一系列接口，提供一个一致性的界面，方便调用</p>\n<span id=\"more\"></span>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc NewAPI() FacadeAPI &#123;\n\treturn &amp;apiImpl&#123;\n\t\ta: NewAModuleAPI(),\n\t\tb: NewBModuleAPI(),\n\t&#125;\n&#125;\n\n&#x2F;&#x2F; FacadeAPI is facade interface of facade package\ntype FacadeAPI interface &#123;\n\tTest() string\n&#125;\n\n&#x2F;&#x2F; facade implement\ntype apiImpl struct &#123;\n\ta AModuleAPI\n\tb BModuleAPI\n&#125;\n\nfunc (a *apiImpl) Test() string &#123;\n\taRet :&#x3D; a.a.TestA()\n\tbRet :&#x3D; a.b.TestB()\n\treturn fmt.Sprintf(&quot;%s\\n%s&quot;, aRet, bRet)\n&#125;\n\n&#x2F;&#x2F; NewAModuleAPI return new AModuleAPI\nfunc NewAModuleAPI() AModuleAPI &#123;\n\treturn &amp;aModuleImpl&#123;&#125;\n&#125;\n\n&#x2F;&#x2F; AModuleAPI ...\ntype AModuleAPI interface &#123;\n\tTestA() string\n&#125;\n\ntype aModuleImpl struct&#123;&#125;\n\nfunc (*aModuleImpl) TestA() string &#123;\n\treturn &quot;A module running&quot;\n&#125;\n\n&#x2F;&#x2F; NewBModuleAPI return new BModuleAPI\nfunc NewBModuleAPI() BModuleAPI &#123;\n\treturn &amp;bModuleImpl&#123;&#125;\n&#125;\n\n&#x2F;&#x2F; BModuleAPI ...\ntype BModuleAPI interface &#123;\n\tTestB() string\n&#125;\n\ntype bModuleImpl struct&#123;&#125;\n\nfunc (*bModuleImpl) TestB() string &#123;\n\treturn &quot;B module running&quot;\n&#125;\n\nfunc main() &#123;\n\tfmt.Println(NewAPI().Test())\n&#125;</code></pre>\n","text":"外观模式的主要作用是 减少客户端与系统内部交互的复杂性，对子系统的一系列接口，提供一个一致性的界面，方便调用 package main import &quot;fmt&quot; func NewAPI() FacadeAPI &#123; return &amp;apiImp...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之适配器模式","uid":"81dbbf6776f0e83a5de64679463cd385","slug":"golang/dp/理解设计模式之适配器模式","date":"2020-10-26T03:20:15.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之适配器模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"适配器模式用于转换一种接口适配另一种接口。 package main import &quot;fmt&quot; &#x2F;&#x2F; Target 是适配的目标接口 type Target interface &#123; Request() string &#125; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"结构型设计模式","slug":"结构型设计模式","count":7,"path":"api/tags/结构型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之原型模式","uid":"ff7986bd3e13e58f395ae3555d928c50","slug":"golang/dp/理解设计模式之原型模式","date":"2020-10-23T12:08:31.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之原型模式.json","keywords":"golang rust python docker k8s","cover":null,"text":"原型模式和其他创建型模式不一样的是，它是复制一个已有对象，而不是创建一个新对象，被复制的对象就叫做原型。原型模式多用于建造复杂或者耗时的对象，这样直接复制会比较高效。原型对象一般会配合原型管理器一起使用 go package main import ( &quot;fmt&quo...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}