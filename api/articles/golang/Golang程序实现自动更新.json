{"title":"Golang程序实现自动更新","uid":"26beaec8904420e53dae414f48ef2055","slug":"golang/Golang程序实现自动更新","date":"2020-10-16T08:03:06.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/Golang程序实现自动更新.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>&amp;#160;&amp;#160;&amp;#160;&amp;#160;我们都知道一个正常的golang程序部署流程大致都要经过编译，测试，发布(人工或者自动化) ，在大公司基础设施完善，当然也未必。我现在就身处于一个上市公司，但是基础建设极其惨不忍睹的公司。扯远了。进入正题</p>\n<span id=\"more\"></span>\n<p>假如我们就想实现一个不登录服务器，去通过暴露一个接口让程序自动更新他自己呢？</p>\n<ol>\n<li><p>go run + 监控文件变动<br>之前有看到一个库是用来监测go源代码变动的，如果有变动则会使变动实时生效，不过这个库是什么我忘了。这种方式比较奇葩。因为这样的话就意味着你的go程序 是没有编译，使用go run的形式跑在服务器的。这种我还不如用python对吧。当然了python程序也可以编译后在运行呢。</p>\n</li>\n<li><p><a href=\"https://github.com/jpillora/overseer\">jpillora&#x2F;overseer</a><br>这是一个开源的组件，用来实现上述需求。同类型的项目还有<a href=\"https://godoc.org/github.com/cloudflare/tableflip\">https://godoc.org/github.com/cloudflare/tableflip</a>,这里我们暂时不研究他。</p>\n<ul>\n<li><p>原理：<br>通过fork一个子进程去执行main函数中的程序逻辑，所有的请求会通过当前的主进程（也就是 监听进程），通过队列通道下放到子进程（也就是我们自己真正的进程）中取执行 。</p>\n</li>\n<li><p>废话少说：撸代码。</p>\n <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport (\n  &quot;fmt&quot;\n  &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot;\n  &quot;github.com&#x2F;jpillora&#x2F;overseer&quot;\n  &quot;github.com&#x2F;jpillora&#x2F;overseer&#x2F;fetcher&quot;\n  &quot;io&#x2F;ioutil&quot;\n  &quot;net&#x2F;http&quot;\n  &quot;time&quot;\n)\n\nvar (\n  BuildID string &#x3D; &quot;0&quot;\n)\n\nfunc main() &#123;\n  overseer.Run(overseer.Config&#123;\n    Program: program,\n    Address: &quot;:8080&quot;,\n    Fetcher: &amp;fetcher.HTTP&#123;\n      URL:      &quot;http:&#x2F;&#x2F;localhost:4000&#x2F;bin&#x2F;app&quot;,\n      Interval: 3 * time.Second,\n    &#125;,\n    Debug: true,\n  &#125;)\n&#125;\n\nfunc program(state overseer.State) &#123;\n  r :&#x3D; gin.Default()\n  r.GET(&quot;&#x2F;&quot;, func(c *gin.Context) &#123;\n    c.JSON(200, gin.H&#123;&quot;正在运行版本&quot;: BuildID&#125;)\n  &#125;)\n\n  &#x2F;&#x2F; 通过接口上传更新后的版本，触发overseer去自动更新\n  r.Any(&quot;&#x2F;bin&#x2F;app&quot;, func(c *gin.Context) &#123;\n    if b, err :&#x3D; ioutil.ReadFile(&quot;path&#x2F;main&quot;); err !&#x3D; nil &#123;\n      c.JSON(200, gin.H&#123;&quot;msg&quot;: err.Error()&#125;)\n    &#125; else &#123;\n      c.Writer.WriteHeader(http.StatusOK)\n      c.Header(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;main&quot;)\n      c.Header(&quot;Content-Type&quot;, &quot;application&#x2F;octet-stream&quot;)\n      c.Header(&quot;Content-Length&quot;, fmt.Sprintf(&quot;%d&quot;, len(b)))\n\n      if c.Request.Method &#x3D;&#x3D; &quot;HEAD&quot; &#123;\n        c.Header(&quot;ETag&quot;, &quot;v002&quot;)\n        c.Status(200)\n      &#125; else &#123;\n        _, _ &#x3D; c.Writer.Write(b)\n      &#125;\n    &#125;\n  &#125;)\n\n  _ &#x3D; r.RunListener(state.Listener)\n&#125;</code></pre>\n</li>\n<li><p>注意: 像此类接口，实际开发过程中一定要注意鉴权，以及校验上传文件的哈希值，确保万无一失。哎，见过太多没有安全意识的小盆友了。</p>\n</li>\n<li><p>缺陷: 监听者自身的配置，还是需要手动更新，无法实现自动更新。</p>\n</li>\n<li><p>虽然花了一点时间研究，不过在K8S，docker这么好用的今天，这个我也没在实际项目使用，纯当记录吧</p>\n</li>\n</ul>\n</li>\n</ol>\n","text":"&amp;#160;&amp;#160;&amp;#160;&amp;#160;我们都知道一个正常的golang程序部署流程大致都要经过编译，测试，发布(人工或者自动化) ，在大公司基础设施完善，当然也未必。我现在就身处于一个上市公司，但是基础建设极其惨不忍睹的公司。扯远了。进入...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"go","slug":"go","count":5,"path":"api/categories/go.json"}],"tags":[{"name":"go","slug":"go","count":7,"path":"api/tags/go.json"}],"toc":"","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"Golang程序Dockerfile最佳实践","uid":"e68c644f0327c9651998fad434541edf","slug":"docker/Golang程序Dockerfile最佳实践","date":"2020-10-16T08:51:49.000Z","updated":"2022-03-13T05:31:05.835Z","comments":true,"path":"api/articles/docker/Golang程序Dockerfile最佳实践.json","keywords":"golang rust python docker k8s","cover":[],"text":"众所周知，通过Dockerfile去构建镜像是分层执行的，\b如何使我们的镜像最小化，以及不会泄露源代码等，我总结一个比较通用的Dockerfile. FROM golang:latest as builder WORKDIR &#x2F;home&#x2F;works&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"docker","slug":"docker","count":2,"path":"api/categories/docker.json"},{"name":"go","slug":"docker/go","count":1,"path":"api/categories/docker/go.json"}],"tags":[{"name":"go","slug":"go","count":7,"path":"api/tags/go.json"},{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"ElasticSearch之ScrollAPI","uid":"a96d6d6139d5419f25b0435643fa218f","slug":"es/ElasticSearch之ScrollAPI","date":"2020-10-16T07:07:23.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/es/ElasticSearch之ScrollAPI.json","keywords":"golang rust python docker k8s","cover":null,"text":"&amp;#160;&amp;#160;&amp;#160;&amp;#160;最近遇到了一个需求，公司集团的所有项目日志都是存在kafka中，通过logstash去不断读取，通过一定的规则将日志切割为我们需要的格式，存入ES。我们要做的就是定期不断的从ES中取获取日志，分析日志...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"es","slug":"es","count":2,"path":"api/categories/es.json"}],"tags":[{"name":"es","slug":"es","count":1,"path":"api/tags/es.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}