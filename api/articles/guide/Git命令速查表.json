{"title":"Git命令概览","uid":"99196e093c1a105719cfe8e1edea1c78","slug":"guide/Git命令速查表","date":"2020-10-13T03:22:28.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/guide/Git命令速查表.json","keywords":"golang rust python docker k8s","cover":[],"content":"<p><img src=\"/images/git/git_all.png\" alt=\"git_all\"></p>\n<span id=\"more\"></span>\n<h4 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h4><ul>\n<li><code>git clone url</code> 克隆远程版本库</li>\n<li><code>git init</code> 初始化本地版本库</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><code>git config --global user.name &#39;chengcp&#39;</code> 配置global级别的用户名</li>\n<li><code>git config --global user.email &#39;1326895569@qq.com&#39;</code> 配置global级别的邮箱</li>\n<li><code>git config --global -l</code> 查看global级别的配置列表</li>\n<li><code>git config --global --unset user.name</code> 删除用户名</li>\n<li><code>git config --global alias.last &#39;log -1 HEAD&#39;</code> 配置last别名，使用git last将显示最近的一次提交记录</li>\n</ul>\n<h4 id=\"添加和删除文件\"><a href=\"#添加和删除文件\" class=\"headerlink\" title=\"添加和删除文件\"></a>添加和删除文件</h4><ul>\n<li><code>git add file1 file2</code> 添加指定文件到暂存区</li>\n<li><code>git add dir</code> 添加指定目录到暂存区</li>\n<li><code>git add .</code> 添加当前目录的所有文件到暂存区</li>\n<li><code>git mv oldname newname</code> 对一个已经追踪过的文件进行改名，同时加入暂存区</li>\n<li><code>git rm file1 file2</code> 删除工作区文件，同时将这次删除放入暂存区</li>\n<li><code>git rm --cached file</code> 停止追踪指定文件，但该文件会保留在工作区；tracked变成untracked</li>\n</ul>\n<h4 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h4><ul>\n<li><code>git commit file1 file 2 -m message</code> 提交暂存区指定文件到本地仓库</li>\n<li><code>git commit -m message</code> 提交暂存区所有文件到本地仓库</li>\n<li><code>git commit -a -m message</code> 自动暂存所有已经追踪过的文件，且提交到本地仓库</li>\n<li><code>git commit --amend -m message</code> 使用一次新的提交，替代上次提交</li>\n</ul>\n<h4 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h4><ul>\n<li><code>git branch</code> 查看所有本地分支</li>\n<li><code>git branch –r</code> 查看所有远程分支</li>\n<li><code>git branch –a</code> 查看所有远程和本地分支</li>\n<li><code>git branch –v</code> 查看本地所有分支最新一次提交信息</li>\n<li><code>git branch [branch]</code> 新建分支</li>\n<li><code>git checkout –b [branch]</code> 新建一个分支，并且切换过去</li>\n<li><code>git branch [branch] [commit]</code> 基于某次提交，建立一个分支</li>\n<li><code>git branch --track [branch] [remote-branch]</code> 建立一个分支，并且与远程分支建立追踪关系</li>\n<li><code>git branch --set-upstream [branch] [remote-branch]</code> 在现有的本地分支和远程分支之间建立追踪关系</li>\n<li><code>git branch –m [old-branch] [new-branch]</code> 重命名分支</li>\n<li><code>git merge [branch]</code> 把指定分支合并到当前分支</li>\n<li><code>git chery-pick [commit] [commit]</code> 选择提交，合并进当前分支</li>\n<li><code>git branch –d [branch]</code> 删除本地分支</li>\n<li><code>git push origin –d [branch]</code> 删除远程分支</li>\n<li><code>git checkout [branch]</code> 切换分支</li>\n<li><code>git checkout -</code> 切换到上一个最近使用过的分支</li>\n</ul>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><ul>\n<li><code>git tag</code> 列出所有标签</li>\n<li><code>git show [tag]</code> 查看指定标签信息</li>\n<li><code>git tag [tag]</code> 给最近一次提交打一个标签</li>\n<li><code>git tag [tag] [commit]</code> 在某次提交上打一个标签</li>\n<li><code>git tag –d [tag]</code> 删除本地指定标签</li>\n<li><code>git push origin –d tag [tag]</code> 删除远程的标签</li>\n<li><code>git push origin [tag]</code> 推送指定标签</li>\n<li><code>git push origin --tags</code> 推送所有标签</li>\n</ul>\n<h4 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h4><ul>\n<li><code>git status</code> 查看文件状态</li>\n<li><code>git help [command]</code> 获取帮助文档</li>\n<li><code>git [command] --help</code> 获取帮助文档</li>\n<li><code>git log</code> 查看当前分支的提交记录</li>\n<li><code>git log –all</code> 查看所有分支的提交记录</li>\n<li><code>git log -5 --oneline --graph</code> 查看最近5次提交记录，以单行、树状图形式显示</li>\n<li><code>git reflog</code> 查看本地所有变更记录</li>\n<li><code>git diff</code> 查看工作区和暂存区的差异</li>\n<li><code>git diff -- file</code> 某个文件在工作区和暂存区的差异</li>\n<li><code>git diff HEAD</code> 工作区和最新一次提交的差异</li>\n<li><code>git diff --cached</code> 暂存区和HEAD的差异</li>\n<li><code>git diff branch_a branch_b – file</code> 某文件在两个分支间的差异</li>\n</ul>\n<h4 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h4><ul>\n<li><code>git remote -v</code> 查看所有远程仓库</li>\n<li><code>git ls-remote origin</code> 查看远程仓库引用列表</li>\n<li><code>git remote show origin</code> 查看远程仓库信息</li>\n<li><code>git fetch origin</code> 拉取远程仓库最新提交</li>\n<li><code>git pull origin master</code> 拉取远程master，并且合并到本地当前分支</li>\n<li><code>git remote add upstream url</code> 添加一个新的远程仓库，命名为upstream</li>\n<li><code>git push origin master</code> 推送到远程origin的master分支</li>\n<li><code>git push origin --all</code> 推送所有分支到远程仓库</li>\n<li><code>git remote prune origin</code> 删除远程仓库中不存在的分支</li>\n<li><code>git push origin --delete tag &quot;tagname&quot;</code> 删除远程tag</li>\n</ul>\n<h4 id=\"撤销\"><a href=\"#撤销\" class=\"headerlink\" title=\"撤销\"></a>撤销</h4><ul>\n<li><code>git reset --soft HEAD</code> 回滚到指定版本，保留工作区和暂存区</li>\n<li><code>git reset --mixed HEAD</code> 回滚到指定版本，保留工作区，清空暂存区；–mixed是默认参数，即等同于git reset HEAD</li>\n<li><code>git reset --hard HEAD</code> 回滚到指定版本，清空工作区和暂存区</li>\n<li><code>git reset HEAD -- file</code> 清空暂存区中某个文件的修改</li>\n<li><code>git checkout -- file</code> 检出暂存区的文件到工作目录</li>\n<li><code>git checkout .</code> 检出暂存区的所有文件到工作目录</li>\n<li><code>git revert HEAD~ 2</code> 回滚到2个祖先提交的版本，同时产生新的提交记录</li>\n<li><code>git revert --continue</code> 冲突解决，且把修改提交到暂存区后执行回滚，生成一个新的提交</li>\n<li><code>git revert –abort</code> 取消回滚，回到之前的状态</li>\n</ul>\n<h4 id=\"储藏\"><a href=\"#储藏\" class=\"headerlink\" title=\"储藏\"></a>储藏</h4><ul>\n<li><code>git stash</code> 将工作区和暂存区的变更保存到储藏堆栈中，同时工作区和暂存区恢复到HEAD一样</li>\n<li><code>git stash list</code> 查看储藏列表</li>\n<li><code>git stash pop</code> 应用最近的一次储藏，并且从储藏栈中移除该条记录</li>\n<li><code>git stash apply stash@&#123;0&#125;</code> 应用最近的一次储藏，不移除记录；等同于 git stash apply</li>\n<li><code>git stash pop --index</code> 应用最近一次储藏，–index表示暂存区的变更也会更新，否则只更新工作区变更</li>\n<li><code>git stash drop stash@&#123;0&#125;</code> 移除储藏记录</li>\n</ul>\n<h4 id=\"高级\"><a href=\"#高级\" class=\"headerlink\" title=\"高级\"></a>高级</h4><ol>\n<li><p>美化查看分支合并图</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git log --graph --pretty&#x3D;oneline --abbrev-commit --graph</code></pre></li>\n<li><p>强制远程代码覆盖本地</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git fetch --all\ngit reset --hard origin&#x2F;[branch]\ngit pull</code></pre></li>\n<li><p>修改<code>.gitignore</code>文件后使其生效</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git rm -r --cached .\ngit add .\ngit commit -m &quot;xx&quot;\ngit push</code></pre>\n</li>\n<li><p>当我们不在master分支时又想要从最新master分支创建一个开发分支可以如下操作，不用切换到master分支</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git fetch origin&#x2F;master\ngit checkout branch [new branch] origin&#x2F;master</code></pre></li>\n</ol>\n","text":" 创建版本库 git clone url 克隆远程版本库 git init 初始化本地版本库 配置 git config --global user.name &#39;chengcp&#39; 配置global级别的用户名 git config --global user.em...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"操作指南","slug":"操作指南","count":5,"path":"api/categories/操作指南.json"}],"tags":[{"name":"git","slug":"git","count":2,"path":"api/tags/git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%89%88%E6%9C%AC%E5%BA%93\"><span class=\"toc-text\">创建版本库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">添加和删除文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">提交</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF\"><span class=\"toc-text\">分支</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">标签</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">查看信息</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">远程操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%92%A4%E9%94%80\"><span class=\"toc-text\">撤销</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%82%A8%E8%97%8F\"><span class=\"toc-text\">储藏</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">高级</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"hexo如何插入图片","uid":"7110b28ed6014c88f6bf2e9ca83fa56d","slug":"config/Hexo如何插入图片","date":"2020-10-14T05:42:20.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/config/Hexo如何插入图片.json","keywords":"golang rust python docker k8s","cover":null,"text":" 首先安装插件 npm install hexo-asset-image --save 编辑hexo配置文件_config.yml post_asset_folder: true 修改node_modules/hexo-asset-image/index.js 为如下内容 use...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":2,"path":"api/tags/hexo.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"计算机基础之网络协议","uid":"bd1810b01d17021ef51e6fe61514d2b5","slug":"basic/计算机基础之网络协议","date":"2020-09-19T09:19:52.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/basic/计算机基础之网络协议.json","keywords":"golang rust python docker k8s","cover":[],"text":"我们都知道OSI把网络分为了一个7层的模型，OSI是Open System Interconnect的缩写，意为开放式系统互联。 主要是： 应用层（Application） 表示层（Presentation） 会话层（Session） 传输层（Transport） 网络层（Net...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"计算机基础","slug":"计算机基础","count":2,"path":"api/categories/计算机基础.json"}],"tags":[{"name":"网络协议","slug":"网络协议","count":1,"path":"api/tags/网络协议.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}