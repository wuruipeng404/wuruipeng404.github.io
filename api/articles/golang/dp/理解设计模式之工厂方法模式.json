{"title":"理解设计模式之工厂方法模式","uid":"ac7a60db5b9b5c38555c42db8dd8bf35","slug":"golang/dp/理解设计模式之工厂方法模式","date":"2020-10-23T09:40:20.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之工厂方法模式.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>与简单工厂不同，简单工厂 &#x3D; 一个工厂创造所有的 类对象，如果此对象在工厂中没有，就只能修改代码 去新增对象的创造过程<br>而工厂方法 则只是定义了一系列的接口， 定义创建对象的接口，定义工厂的接口，具体的工厂对象，以及 产品 对象 都由外部自己实现。 相当于只是定义了规则</p>\n<span id=\"more\"></span>\n<ol>\n<li><p>go版本</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\n&#x2F;&#x2F; 产品接口\ntype Product interface &#123;\n\tPrice() int\n\tBrand() string\n&#125;\n\n&#x2F;&#x2F; 创造产品的工厂接口\ntype ProductFactory interface &#123;\n\tCreate() Product\n&#125;\n\n&#x2F;&#x2F; ---------------------------------\n&#x2F;&#x2F; 定义产品类, 汽车 与 飞机\ntype Car struct &#123;\n\tbrand string\n\tprice int\n&#125;\n\nfunc (c *Car) Price() int &#123;\n\treturn c.price\n&#125;\n\nfunc (c *Car) Brand() string &#123;\n\treturn c.brand\n&#125;\n\ntype Plane struct &#123;\n\tbrand string\n\tprice int\n&#125;\n\nfunc (c *Plane) Price() int &#123;\n\treturn c.price\n&#125;\n\nfunc (c *Plane) Brand() string &#123;\n\treturn c.brand\n&#125;\n\n&#x2F;&#x2F; 定义 创造产品的工厂\ntype PlaneFactory struct &#123;\n&#125;\n\nfunc (c *PlaneFactory) Create() Product &#123;\n\treturn &amp;Plane&#123;\n\t\tbrand: &quot;波音&quot;,\n\t\tprice: 9999999,\n\t&#125;\n&#125;\n\ntype CarFactory struct &#123;\n&#125;\n\nfunc (c *CarFactory) Create() Product &#123;\n\treturn &amp;Car&#123;\n\t\tbrand: &quot;兰博基尼&quot;,\n\t\tprice: 120000,\n\t&#125;\n&#125;\n\nfunc main() &#123;\n\n\tpf :&#x3D; &amp;PlaneFactory&#123;&#125;\n\tplane :&#x3D; pf.Create()\n\tfmt.Println(plane.Price())\n\n\tcf :&#x3D; &amp;CarFactory&#123;&#125;\n\tcar :&#x3D; cf.Create()\n\tfmt.Println(car.Price())\n&#125;</code></pre>\n</li>\n<li><p>python版本</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class GoodGuy(object):\n    &quot;&quot;&quot;\n    雷锋\n    &quot;&quot;&quot;\n\n    @staticmethod\n    def sweep():\n        print(&quot;扫地&quot;)\n\n    @staticmethod\n    def wash_clothes():\n        print(&quot;洗衣服&quot;)\n\n    @staticmethod\n    def buy_something():\n        print(&quot;买东西&quot;)\n\n\nclass Student(GoodGuy):\n    &quot;&quot;&quot;\n    学生\n    &quot;&quot;&quot;\n\n    @staticmethod\n    def buy_something():\n        print(&quot;学生买东西&quot;)\n\n\nclass Volunteer(GoodGuy):\n    &quot;&quot;&quot;\n    社区志愿者\n    &quot;&quot;&quot;\n    @staticmethod\n    def buy_something():\n        print(&quot;社区志愿者买东西&quot;)\n\n\nclass GoodManFactory(object):\n\n    def create_goodman(self):\n        pass\n\n\nclass StudentFactory(GoodManFactory):\n\n    def create_goodman(self):\n        return Student()\n\n\nclass VolunteerFactory(GoodManFactory):\n\n    def create_goodman(self):\n        return Volunteer()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    a &#x3D; StudentFactory()\n    b &#x3D; VolunteerFactory()\n    a.create_goodman().buy_something()</code></pre></li>\n</ol>\n","text":"与简单工厂不同，简单工厂 &#x3D; 一个工厂创造所有的 类对象，如果此对象在工厂中没有，就只能修改代码 去新增对象的创造过程而工厂方法 则只是定义了一系列的接口， 定义创建对象的接口，定义工厂的接口，具体的工厂对象，以及 产品 对象 都由外部自己实现。 相当于只是定义了规则 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"},{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}],"toc":"","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之抽象工厂","uid":"c1243241d6dbe40f7f47b73a2a79fbcc","slug":"golang/dp/理解设计模式之抽象工厂","date":"2020-10-23T10:54:34.000Z","updated":"2021-12-11T02:10:04.778Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之抽象工厂.json","keywords":"golang rust python docker k8s","cover":null,"text":"抽象工厂 是在工厂方法的基础之上进化而来，其中最大的不同点是：工厂方法模式中的工厂 只创建一种对象，而抽象工厂中的工厂 则是创建多种对象，而往往这些对象是有关联的，一个家族的一系列对象，比如 订单和订单详情 go &#x2F;&#x2F; 订单信息接口 type Order in...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"理解设计模式之简单工厂","uid":"66121ee3bb53d4eaf9b18fd8c88d13c8","slug":"golang/dp/理解设计模式之简单工厂","date":"2020-10-23T09:27:12.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之简单工厂.json","keywords":"golang rust python docker k8s","cover":null,"text":"所谓简单工厂是指 用来封装一个类对象的具体创建细节，去构造一个对象在go语言中没有构造函数一说，所以一般会定义NewXXX函数来初始化相关类。NewXXX 函数返回接口时就是简单工厂模式，也就是说Golang的一般推荐做法就是简单工厂。 package factory impor...","link":"","photos":[],"count_time":{"symbolsCount":687,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"},{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}