{"title":"记一次磁盘满后引发的血案","uid":"0fd644d7a8607c81bbe89c11e736a98e","slug":"work/记一次磁盘满后引发的血案","date":"2020-12-07T05:37:12.000Z","updated":"2022-03-13T05:30:06.012Z","comments":true,"path":"api/articles/work/记一次磁盘满后引发的血案.json","keywords":"golang rust python docker k8s","cover":null,"content":"<h3 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h3><ul>\n<li>微服务项目， 部署于docker swarm集群</li>\n<li>docker swarm集群 是一台物理服务器 + 物理服务器自身虚拟出来的 四个节点，也就是总共五个节点所组成。</li>\n<li>我们的中间件有 ELK, MySQL, Redis, RabbitMQ, DFS, ETCD，+上 大量的服务集群</li>\n<li>由于一些原因，我们的 master 一开始在一台虚拟机节点，nfs 也是，这也是导致这次问题的主要原因，虚拟节点磁盘太小了只有100G</li>\n<li>好在项目目前处于迭代开发，半上线试用的状态，影响到不是很大，但还是挺烦人的。</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"详情\"><a href=\"#详情\" class=\"headerlink\" title=\"详情\"></a>详情</h3><p>  我们的共享数据卷是用 convoy 这个插件去进行管理的，但是一开始由于一些原因 server 部署在了 虚拟节点。 我们的服务日志，中间件的数据目录，全都是挂载在nfs当中。</p>\n<p>  所以，周末得时候，Duang的一声，zabbix 告警了，磁盘不足。但是由于我们公司环境特殊，没有申请过vpn还不太好登，所以就等到了周一过来解决。</p>\n<ol>\n<li>遇到这个问题的时候，想法就很简单啊，把历史日志删掉不就好了，再修改一下程序，不要备份所有的历史日志了。然而现实总是没那么简单，到公司查看的时候，docker daemon 直接挂了，convoy 创建的共享数据卷 也是直接消失了。</li>\n<li>查看了其他节点，都很正常，就是master挂了。</li>\n<li>检查其他节点的磁盘状况，df -h duang的一声 卡住了。 我严重怀疑就是nfs搞的鬼</li>\n<li><code>yum -y install strace</code></li>\n<li><code>strace df -h</code> debug, 果然是卡在了， &#x2F;mnt&#x2F;nfs 我们的共享卷</li>\n<li>那好办 我们先 <code>umount -f /mnt/nfs</code>, 然而告诉我们 device is busy</li>\n<li>有占用，<code>fuser -m /mnt/nfs</code> 查看一下pid kill掉，然鹅我这一步也是卡，不过没关系，因为我当然知道当前机器哪些服务在占用啦。</li>\n<li>重新部署项目，把集群 leader 以及 convoy server 都迁移到 物理机节点，过段时间再迁移到k8s吧。swarm有些地方还是挺难用的</li>\n</ol>\n<h3 id=\"一些幸运的地方\"><a href=\"#一些幸运的地方\" class=\"headerlink\" title=\"一些幸运的地方\"></a>一些幸运的地方</h3><ol>\n<li>我们的数据都挂载出来了，所以数据完全没有丢失</li>\n<li>项目部署都是通过yaml编写配置文件 使用<code>docker stack deploy -c xx.yaml</code> ,所以部署也是问题不大，无非就是修改一些节点label的问题。</li>\n</ol>\n","text":"概要 微服务项目， 部署于docker swarm集群 docker swarm集群 是一台物理服务器 + 物理服务器自身虚拟出来的 四个节点，也就是总共五个节点所组成。 我们的中间件有 ELK, MySQL, Redis, RabbitMQ, DFS, ETCD，+上 大量的服...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"work","slug":"work","count":1,"path":"api/categories/work.json"}],"tags":[{"name":"工作记录","slug":"工作记录","count":1,"path":"api/tags/工作记录.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%A6%81\"><span class=\"toc-text\">概要</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%A6%E6%83%85\"><span class=\"toc-text\">详情</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%B9%B8%E8%BF%90%E7%9A%84%E5%9C%B0%E6%96%B9\"><span class=\"toc-text\">一些幸运的地方</span></a></li></ol>","author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}},"mapped":true,"prev_post":{"title":"k8s之基础概念理解(二)","uid":"3ded30373967d6211e6c798b6bf7e484","slug":"k8s/2.k8s之基础概念理解","date":"2020-12-07T06:12:09.000Z","updated":"2021-12-11T02:10:04.780Z","comments":true,"path":"api/articles/k8s/2.k8s之基础概念理解.json","keywords":"golang rust python docker k8s","cover":[],"text":"本篇主要来解释一下k8s繁多的概念 我觉得吧第一遍不用一定要全部理解，先大致过一下，以后会慢慢熟悉 K8S中的概念按我的理解把他分为这样两类： 架构类：所谓架构类，就是指K8S自身部署，调度，的一些组件和概念 服务类：就是针对我们自己的服务调度，部署，控制，所用到的概念 架构类 ...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"k8s","slug":"k8s","count":4,"path":"api/categories/k8s.json"}],"tags":[{"name":"k8s","slug":"k8s","count":5,"path":"api/tags/k8s.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}},"next_post":{"title":"k8s之搭建环境(一)","uid":"3ecf53fd0f043e7fd47d014c92e0e74b","slug":"k8s/1.k8s之搭建环境","date":"2020-11-27T05:18:17.000Z","updated":"2021-12-11T02:10:04.780Z","comments":true,"path":"api/articles/k8s/1.k8s之搭建环境.json","keywords":"golang rust python docker k8s","cover":[],"text":"flag:从今天开始，我将更新K8S系列博文，从环境搭建，到K8S概念的详解，到在k8s上部署完整项目，乃至有可能对K8S的二次开发。未来可期 MAC1. 安装docker-desktop，这个没什么好说的 docker 2. 配置镜像仓库源进行加速 可以选择的源有很多 dock...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"k8s","slug":"k8s","count":4,"path":"api/categories/k8s.json"}],"tags":[{"name":"k8s","slug":"k8s","count":5,"path":"api/tags/k8s.json"}],"author":{"name":"Rumple","slug":"blog-author","avatar":"/images/avatar.jpeg","link":"/","description":"不断学习 才能更加强大","socials":{"github":"https://github.com/wuruipeng404","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"email":{"icon":"/images/mail.png","link":"mailto:wrp357711589@163.com"}}}}}}