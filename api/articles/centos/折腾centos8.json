{"title":"折腾之在CentOS8上安装K8s环境(废弃)","uid":"9de8279fb9a993c3fcae6823edce7c19","slug":"centos/折腾centos8","date":"2020-10-21T05:29:21.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/centos/折腾centos8.json","keywords":"golang rust python docker k8s","cover":null,"content":"<p>（红帽不想让我们白嫖了，GG）继续centos7，也可以慢慢转向debian了<br>centos8 已经出来一段时间了，在刚出来的时候，尝试过使用一次，貌似相较7变化有些大，就没继续折腾<br>现在有时间了，来尝试一下把K8S的环境搭建在centos8上。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><h5 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h5><p>  我用的是Parallels Desktop,装的centos8虚拟机，用的镜像目前版本是 <code>CentOS-8.2.2004-x86_64-minimal.iso</code></p>\n</li>\n<li><h5 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h5><p>  跟之前不一样的是，8装好<code>ifconfig</code>是没有ip的，这就需要我们手动配置一下了。</p>\n</li>\n<li><p>查看 <code>/etc/sysconfig/network-scripts/</code>目录下并没有eth0网卡，不过有一个<code>ifcfg-xxx</code>，这里应该每个人是不一样的，不过不管他是什么我们都给改为，<code>ifcfg-eth0</code>.</p>\n</li>\n<li><p>同时还要修改<code>ifcfg-eth0</code>内的几个配置项 <code>NAME</code>和<code>DEVICE</code> 改为 eth0, <code>ONBOOT</code> 改为 yes.</p>\n</li>\n<li><p>编辑<code>/etc/default/grub</code> 在 <code>GRUBCMDLINELINUX</code>变量 的 <code>crashkernel=auto</code> 后面加上 <code>net.ifnames=0 biosdevname=0</code></p>\n</li>\n<li><p>运行命令<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>来重新生成GRUB配置并更新内核参数.</p>\n</li>\n<li><p>最后重启，然后就可以看到ip啦，就可以直接ssh进行操作了。</p>\n</li>\n<li><p>PS：centos8 已经没有newwork.service这个服务了，如果要单纯重启网络可以执行 <code>nmcli c reload</code>。</p>\n</li>\n<li><h5 id=\"修改yum源为清华源\"><a href=\"#修改yum源为清华源\" class=\"headerlink\" title=\"修改yum源为清华源\"></a>修改yum源为清华源</h5><ol>\n<li>首先备份 <code>sudo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</code></li>\n<li>然后编辑 <code>/etc/yum.repos.d/CentOS-Base.repo</code><ol>\n<li>注释 <code>mirrorlist=</code> 这一行</li>\n<li>取消注释 <code>baseurl=</code> 这一行，并将 <code>mirror.centos.org</code> 替换为 <code>mirrors.tuna.tsinghua.edu.cn</code></li>\n</ol>\n</li>\n<li>最后 执行 <code>sudo yum makecache &amp;&amp; sudo yum -y update</code></li>\n</ol>\n</li>\n<li><h5 id=\"安装一些工具\"><a href=\"#安装一些工具\" class=\"headerlink\" title=\"安装一些工具\"></a>安装一些工具</h5> <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y install python3 vim git wget telnet* the_silver_searcher\npip3 install mycli ipython httpie</code></pre>\n<ul>\n<li>htop<br>原来htop安装 直接<code>yum -y install 就可以的</code>，现在需要用<code>dnf</code><ol>\n<li><code>dnf install https://dl.Fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm</code></li>\n<li><code>dnf update</code></li>\n<li><code>dnf install htop</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><h5 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h5><ol>\n<li>安装依赖 <code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></li>\n<li>配置阿里云仓库 <code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li>\n<li>由于centos8默认使用podman，所以我们要先手动安装containerd.io，同时如果你的源下载的版本太低，可以手动下载新版本 <a href=\"https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/\">Download</a> 进行安装</li>\n<li>yum -y install docker-ce</li>\n<li>修改docker配置文件，镜像源加速  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cat &lt;&lt;EOF &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json\n&#123;\n    &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;registry.docker-cn.com&quot;,&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;],\n&#125;\nEOF</code></pre></li>\n<li><code>systemctl start docker</code></li>\n</ol>\n</li>\n<li><h5 id=\"安装K8S\"><a href=\"#安装K8S\" class=\"headerlink\" title=\"安装K8S\"></a>安装K8S</h5><ol>\n<li>关闭防火墙   <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">systemctl disable firewalld\nsystemctl stop firewalld</code></pre></li>\n<li>禁用SELinux</li>\n</ol>\n   <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">setenforce 0\n# 或者\nvim &#x2F;etc&#x2F;sysconfig&#x2F;selinux\nSELINUX&#x3D;disabled\nreboot</code></pre>\n\n<ol start=\"3\">\n<li><p>安装kubeadm(用于安装k8s集群的工具)</p>\n   <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 修改源\nvim &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo</code></pre>\n   <pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">[kubernetes]\nname&#x3D;Kubernetes Repository\nbaseurl&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64&#x2F;\nenabled&#x3D;1\ngpgcheck&#x3D;0</code></pre>\n   <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">yum -y install kubelet kubeadm kubectl --disableexcludes&#x3D;kubernetes</code></pre>\n   <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl enable docker &amp;&amp; systemctl start docker\nsystemctl enable kubelet &amp;&amp; systemctl start kubelet</code></pre>\n</li>\n<li><p>kubeadm config</p>\n   <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 初始化配置文件备用\nkubeadm config print init-defaults &gt; init.defaults.yaml\n# 拷贝一份\ncp init.defaults.yaml init.yaml</code></pre>\n<p>   修改 init.yaml 中的如下项</p>\n   <pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">localAPIEndpoint:\n  advertiseAddress: 你的ip\n\nimageRepository: docker.io&#x2F;aiotceo # 镜像仓库地址</code></pre>\n</li>\n<li><p>下载相关镜像</p>\n   <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">kubeadm config images pull --config&#x3D;init.yaml</code></pre>\n</li>\n<li><p>Master节点</p>\n<ol>\n<li>关闭swap,修改<code>/etc/sysconfig/kubelet</code>的配置项<code>KUBELET_EXTRA_ARGS=--fail-swap-on=false</code></li>\n</ol>\n <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">swapoff -a\nvim &#x2F;etc&#x2F;fstab\n# 注释掉swap的自动挂载</code></pre>\n<ol start=\"2\">\n<li>安装 <pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 这个过程需要一些时间\nkubeadm init --config&#x3D;init-config.yaml\n# 可能会遇到一些错误需要reset kubelet服务\n\n# 修改权限\nmkdir -p $HOME&#x2F;.kube\nsudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config\nsudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</code></pre>\n 注意记录安装成功后的信息 kubeadm join xxxxxxxx</li>\n</ol>\n</li>\n<li><p>Node节点<br>前面的准备工作都是一样的 只需要在最后生成配置文件后执行<br><code>kubeadm join --config=join-config.yaml</code></p>\n</li>\n<li><p>如果你只想安装单节点的话</p>\n <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl taint nodes --all node-role.kubernetes.io&#x2F;master-</code></pre></li>\n</ol>\n</li>\n</ol>\n","text":"（红帽不想让我们白嫖了，GG）继续centos7，也可以慢慢转向debian了centos8 已经出来一段时间了，在刚出来的时候，尝试过使用一次，貌似相较7变化有些大，就没继续折腾现在有时间了，来尝试一下把K8S的环境搭建在centos8上。 虚拟机 我用的是Parallels ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"centos","slug":"centos","count":1,"path":"api/categories/centos.json"}],"tags":[{"name":"centos8","slug":"centos8","count":1,"path":"api/tags/centos8.json"},{"name":"k8s","slug":"k8s","count":5,"path":"api/tags/k8s.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F%E6%9C%BA\"><span class=\"toc-text\">虚拟机</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#IP\"><span class=\"toc-text\">IP</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9yum%E6%BA%90%E4%B8%BA%E6%B8%85%E5%8D%8E%E6%BA%90\"><span class=\"toc-text\">修改yum源为清华源</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">安装一些工具</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Docker\"><span class=\"toc-text\">安装Docker</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85K8S\"><span class=\"toc-text\">安装K8S</span></a></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"理解设计模式之简单工厂","uid":"66121ee3bb53d4eaf9b18fd8c88d13c8","slug":"golang/dp/理解设计模式之简单工厂","date":"2020-10-23T09:27:12.000Z","updated":"2021-12-11T02:10:04.779Z","comments":true,"path":"api/articles/golang/dp/理解设计模式之简单工厂.json","keywords":"golang rust python docker k8s","cover":null,"text":"所谓简单工厂是指 用来封装一个类对象的具体创建细节，去构造一个对象在go语言中没有构造函数一说，所以一般会定义NewXXX函数来初始化相关类。NewXXX 函数返回接口时就是简单工厂模式，也就是说Golang的一般推荐做法就是简单工厂。 package factory impor...","link":"","photos":[],"count_time":{"symbolsCount":687,"symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":24,"path":"api/categories/设计模式.json"}],"tags":[{"name":"创建型设计模式","slug":"创建型设计模式","count":6,"path":"api/tags/创建型设计模式.json"},{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"hexo添加评论系统","uid":"e58f8fe0572c85b85b5c4eee696e5d39","slug":"config/hexo添加评论系统","date":"2020-10-21T01:54:15.000Z","updated":"2021-12-11T02:10:04.777Z","comments":true,"path":"api/articles/config/hexo添加评论系统.json","keywords":"golang rust python docker k8s","cover":[],"text":" hexo支持很多评论系统，由于我的blog是部署在github page 上，所以，索性我就直接用gitalk用做评论系统 配置方法 首先先在github中创建一个用于存储评论的公有仓库，注意（博客可以部署在私有仓库，评论必须public） 注册Github APP https...","link":"","photos":[],"count_time":{"symbolsCount":457,"symbolsTime":"1 mins."},"categories":[{"name":"hexo","slug":"hexo","count":2,"path":"api/categories/hexo.json"}],"tags":[{"name":"hexo","slug":"hexo","count":2,"path":"api/tags/hexo.json"}],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}